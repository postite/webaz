<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx
 */

namespace geojson\util\_Coordinates;

use \tink\json\_Representation\Representation_Impl_;
use \php\Boot;
use \php\_Boot\HxException;

final class Coordinates_Impl_ {

	/**
	 * @param float $latitude
	 * @param float $longitude
	 * 
	 * @return \Array_hx
	 */
	static public function _new ($latitude, $longitude) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:10: character 2
		$this1 = \Array_hx::wrap([
			$longitude,
			$latitude,
		]);
		return $this1;
	}

	/**
	 * @param \Array_hx $this
	 * @param \Array_hx $that
	 * @param float $radius
	 * 
	 * @return float
	 */
	static public function distanceTo ($this1, $that, $radius) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:21: characters 3-36
		$lat1 = ($this1->arr[1] ?? null) * 0.0174532925199444439;
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:22: characters 3-41
		$lat2 = ($that->arr[1] ?? null) * 0.0174532925199444439;
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:23: characters 3-38
		$long1 = ($this1->arr[0] ?? null) * 0.0174532925199444439;
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:24: characters 3-43
		$long2 = ($that->arr[0] ?? null) * 0.0174532925199444439;
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:25: characters 3-43
		$sdlat = sin(($lat1 - $lat2) / 2);
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:26: characters 3-46
		$sdlong = sin(($long1 - $long2) / 2);
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:27: characters 3-77
		$a = $sdlat * $sdlat + cos($lat1) * cos($lat2) * $sdlong * $sdlong;
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:28: characters 3-65
		return 2 * atan2(sqrt($a), sqrt(1 - $a)) * $radius;
	}

	/**
	 * @param \Array_hx $rep
	 * 
	 * @return \Array_hx
	 */
	static public function fromRepresentation ($rep) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:50: characters 10-19
		$_g = Representation_Impl_::get($rep);
		if ($_g->length === 2) {
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:51: characters 16-19
			$lat = ($_g->arr[1] ?? null);
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:51: characters 10-14
			$long = ($_g->arr[0] ?? null);
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:51: characters 29-55
			$this1 = \Array_hx::wrap([
				$long,
				$lat,
			]);
			return $this1;
		} else {
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:52: characters 13-18
			throw new HxException("Invalid coordinates");
		}
	}

	/**
	 * @param \Array_hx $this
	 * 
	 * @return float
	 */
	static public function get_latitude ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:13: characters 33-47
		return ($this1->arr[1] ?? null);
	}

	/**
	 * @param \Array_hx $this
	 * 
	 * @return float
	 */
	static public function get_longitude ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:14: characters 34-48
		return ($this1->arr[0] ?? null);
	}

	/**
	 * @param \Array_hx $this
	 * @param \Array_hx $that
	 * 
	 * @return float
	 */
	static public function initialBearingTo ($this1, $that) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:33: characters 3-36
		$lat1 = ($this1->arr[1] ?? null) * 0.0174532925199444439;
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:34: characters 3-41
		$lat2 = ($that->arr[1] ?? null) * 0.0174532925199444439;
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:35: characters 3-38
		$long1 = ($this1->arr[0] ?? null) * 0.0174532925199444439;
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:36: characters 3-43
		$long2 = ($that->arr[0] ?? null) * 0.0174532925199444439;
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:37: characters 3-52
		$y = sin($long2 - $long1) * cos($lat2);
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:38: characters 3-103
		$x = cos($lat1) * sin($lat2) - sin($lat1) * cos($lat2) * cos($long2 - $long1);
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:39: characters 3-39
		return atan2($y, $x) * 57.2957795130785499;
	}

	/**
	 * @param \Array_hx $this
	 * @param float $v
	 * 
	 * @return float
	 */
	static public function set_latitude ($this1, $v) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:15: characters 34-52
		return $this1[1] = $v;
	}

	/**
	 * @param \Array_hx $this
	 * @param float $v
	 * 
	 * @return float
	 */
	static public function set_longitude ($this1, $v) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:16: characters 35-53
		return $this1[0] = $v;
	}

	/**
	 * @param \Array_hx $this
	 * 
	 * @return \Array_hx
	 */
	static public function toRepresentation ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/util/Coordinates.hx:45: characters 10-44
		return $this1;
	}
}

Boot::registerClass(Coordinates_Impl_::class, 'geojson.util._Coordinates.Coordinates_Impl_');
Boot::registerGetters('geojson\\util\\_Coordinates\\Coordinates_Impl_', [
	'longitude' => true,
	'latitude' => true
]);
Boot::registerSetters('geojson\\util\\_Coordinates\\Coordinates_Impl_', [
	'longitude' => true,
	'latitude' => true
]);
