<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx
 */

namespace geojson\_MultiPolygon;

use \tink\json\_Representation\Representation_Impl_;
use \php\_Boot\HxAnon;
use \php\Boot;
use \php\_Boot\HxException;

final class MultiPolygon_Impl_ {

	/**
	 * @param \Array_hx $polygons
	 * 
	 * @return object
	 */
	static public function _new ($polygons) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:10: character 2
		$this1 = new HxAnon([
			"type" => "MultiPolygon",
			"coordinates" => $polygons,
		]);
		return $this1;
	}

	/**
	 * @param \Array_hx $polygons
	 * 
	 * @return object
	 */
	static public function fromPolygons ($polygons) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:18: characters 27-67
		$_g = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:18: characters 28-66
		$_g1 = 0;
		while ($_g1 < $polygons->length) {
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:18: characters 32-39
			$polygon = ($polygons->arr[$_g1] ?? null);
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:18: characters 28-66
			++$_g1;
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:18: characters 53-66
			$_g->arr[$_g->length] = $polygon->coordinates;
			++$_g->length;

		}

		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:18: characters 10-68
		$this1 = new HxAnon([
			"type" => "MultiPolygon",
			"coordinates" => $_g,
		]);
		return $this1;
	}

	/**
	 * @param object $rep
	 * 
	 * @return object
	 */
	static public function fromRepresentation ($rep) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:34: characters 10-19
		$_g = Representation_Impl_::get($rep);
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:35: lines 35-36
		if ($_g->type === "MultiPolygon") {
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:35: characters 41-54
			return $_g;
		} else {
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:36: characters 13-18
			throw new HxException("Invalid MultiPolygon");
		}
	}

	/**
	 * @param object $this
	 * 
	 * @return \Array_hx
	 */
	static public function get_polygons ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:21: characters 33-56
		return $this1->coordinates;
	}

	/**
	 * @param object $this
	 * 
	 * @return string
	 */
	static public function get_type ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:23: characters 29-45
		return $this1->type;
	}

	/**
	 * @param object $this
	 * @param \Array_hx $v
	 * 
	 * @return \Array_hx
	 */
	static public function set_polygons ($this1, $v) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:22: characters 34-61
		return $this1->coordinates = $v;
	}

	/**
	 * @param object $this
	 * 
	 * @return object
	 */
	static public function toGeoJson ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:24: characters 44-60
		return $this1;
	}

	/**
	 * @param object $this
	 * 
	 * @return object
	 */
	static public function toRepresentation ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/MultiPolygon.hx:29: characters 10-49
		$this2 = $this1;
		return $this2;
	}
}

Boot::registerClass(MultiPolygon_Impl_::class, 'geojson._MultiPolygon.MultiPolygon_Impl_');
Boot::registerGetters('geojson\\_MultiPolygon\\MultiPolygon_Impl_', [
	'type' => true,
	'polygons' => true
]);
Boot::registerSetters('geojson\\_MultiPolygon\\MultiPolygon_Impl_', [
	'polygons' => true
]);
