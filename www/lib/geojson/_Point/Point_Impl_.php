<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx
 */

namespace geojson\_Point;

use \tink\json\_Representation\Representation_Impl_;
use \php\_Boot\HxAnon;
use \php\Boot;
use \geojson\util\_Coordinates\Coordinates_Impl_;
use \php\_Boot\HxException;

final class Point_Impl_ {

	/**
	 * @param float $latitude
	 * @param float $longitude
	 * 
	 * @return object
	 */
	static public function _new ($latitude, $longitude) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:16: characters 17-53
		$this1 = \Array_hx::wrap([
			$longitude,
			$latitude,
		]);
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:13: character 2
		$this2 = new HxAnon([
			"type" => "Point",
			"coordinates" => $this1,
		]);
		return $this2;
	}

	/**
	 * @param object $this
	 * @param object $that
	 * @param float $radius
	 * 
	 * @return float
	 */
	static public function distanceTo ($this1, $that, $radius) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:32: characters 3-63
		return Coordinates_Impl_::distanceTo($this1->coordinates, $that->coordinates, $radius);
	}

	/**
	 * @param \Array_hx $v
	 * 
	 * @return object
	 */
	static public function fromCoordinates ($v) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:22: characters 70-104
		$this1 = \Array_hx::wrap([
			($v->arr[0] ?? null),
			($v->arr[1] ?? null),
		]);
		$this2 = new HxAnon([
			"type" => "Point",
			"coordinates" => $this1,
		]);
		return $this2;
	}

	/**
	 * @param object $rep
	 * 
	 * @return object
	 */
	static public function fromRepresentation ($rep) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:45: characters 10-19
		$_g = Representation_Impl_::get($rep);
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:46: lines 46-47
		if ($_g->type === "Point") {
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:46: characters 34-47
			return $_g;
		} else {
			#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:47: characters 13-18
			throw new HxException("Invalid Point");
		}
	}

	/**
	 * @param object $this
	 * 
	 * @return float
	 */
	static public function get_latitude ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:24: characters 33-59
		return ($this1->coordinates->arr[1] ?? null);
	}

	/**
	 * @param object $this
	 * 
	 * @return float
	 */
	static public function get_longitude ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:25: characters 34-60
		return ($this1->coordinates->arr[0] ?? null);
	}

	/**
	 * @param object $this
	 * 
	 * @return string
	 */
	static public function get_type ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:28: characters 29-45
		return $this1->type;
	}

	/**
	 * @param object $this
	 * @param object $that
	 * 
	 * @return float
	 */
	static public function initialBearingTo ($this1, $that) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:35: characters 3-61
		return Coordinates_Impl_::initialBearingTo($this1->coordinates, $that->coordinates);
	}

	/**
	 * @param object $this
	 * @param float $v
	 * 
	 * @return float
	 */
	static public function set_latitude ($this1, $v) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:26: characters 34-64
		return $this1->coordinates[1] = $v;
	}

	/**
	 * @param object $this
	 * @param float $v
	 * 
	 * @return float
	 */
	static public function set_longitude ($this1, $v) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:27: characters 35-65
		return $this1->coordinates[0] = $v;
	}

	/**
	 * @param object $this
	 * 
	 * @return \Array_hx
	 */
	static public function toCoordinates ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:20: characters 53-76
		return $this1->coordinates;
	}

	/**
	 * @param object $this
	 * 
	 * @return object
	 */
	static public function toGeoJson ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:29: characters 44-60
		return $this1;
	}

	/**
	 * @param object $this
	 * 
	 * @return object
	 */
	static public function toRepresentation ($this1) {
		#/Users/ut/haxe/haxe_libraries/geojson/0.9.7/haxelib/src/geojson/Point.hx:40: characters 10-49
		$this2 = $this1;
		return $this2;
	}
}

Boot::registerClass(Point_Impl_::class, 'geojson._Point.Point_Impl_');
Boot::registerGetters('geojson\\_Point\\Point_Impl_', [
	'type' => true,
	'longitude' => true,
	'latitude' => true
]);
Boot::registerSetters('geojson\\_Point\\Point_Impl_', [
	'longitude' => true,
	'latitude' => true
]);
