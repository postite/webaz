<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx
 */

use \php\Boot;
use \php\_Boot\HxString;

/**
 * This class provides advanced methods on Strings. It is ideally used with
 * `using StringTools` and then acts as an [extension](https://haxe.org/manual/lf-static-extension.html)
 * to the `String` class.
 * If the first argument to any of the methods is null, the result is
 * unspecified.
 */
class StringTools {
	/**
	 * @var \Array_hx
	 * Character codes of the characters that will be escaped by `quoteWinArg(_, true)`.
	 */
	static public $winMetaCharacters;

	/**
	 * Tells if the string `s` ends with the string `end`.
	 * If `end` is `null`, the result is unspecified.
	 * If `end` is the empty String `""`, the result is true.
	 * 
	 * @param string $s
	 * @param string $end
	 * 
	 * @return bool
	 */
	static public function endsWith ($s, $end) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:48: characters 10-59
		if ($end !== "") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:48: characters 23-59
			return substr($s, -mb_strlen($end)) === $end;
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:48: characters 10-59
			return true;
		}
	}

	/**
	 * Returns the character code at position `index` of String `s`, or an
	 * end-of-file indicator at if `position` equals `s.length`.
	 * This method is faster than `String.charCodeAt()` on some platforms, but
	 * the result is unspecified if `index` is negative or greater than
	 * `s.length`.
	 * End of file status can be checked by calling `StringTools.isEof()` with
	 * the returned value as argument.
	 * This operation is not guaranteed to work if `s` contains the `\0`
	 * character.
	 * 
	 * @param string $s
	 * @param int $index
	 * 
	 * @return int
	 */
	static public function fastCodeAt ($s, $index) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:114: characters 3-76
		$char = ($index === 0 ? $s : mb_substr($s, $index, 1));
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:115: characters 3-26
		if ($char === "") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:115: characters 18-26
			return 0;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:116: characters 10-30
		$code = ord($char[0]);
		if ($code < 192) {
			return $code;
		} else if ($code < 224) {
			return (($code - 192) << 6) + ord($char[1]) - 128;
		} else if ($code < 240) {
			return (($code - 224) << 12) + ((ord($char[1]) - 128) << 6) + ord($char[2]) - 128;
		} else {
			return (($code - 240) << 18) + ((ord($char[1]) - 128) << 12) + ((ord($char[2]) - 128) << 6) + ord($char[3]) - 128;
		}
	}

	/**
	 * Encodes `n` into a hexadecimal representation.
	 * If `digits` is specified, the resulting String is padded with "0" until
	 * its `length` equals `digits`.
	 * 
	 * @param int $n
	 * @param int $digits
	 * 
	 * @return string
	 */
	static public function hex ($n, $digits = null) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:104: characters 3-28
		$s = dechex($n);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:105: characters 3-15
		$len = 8;
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:106: characters 7-23
		$tmp = strlen($s);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:106: characters 26-86
		$tmp1 = null;
		if (null === $digits) {
			$tmp1 = 8;
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:106: characters 72-78
			$len = ($digits > 8 ? $digits : 8);
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:106: characters 26-86
			$tmp1 = $len;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:106: lines 106-109
		if ($tmp > $tmp1) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:107: characters 4-22
			$s = mb_substr($s, -$len, null);
		} else if ($digits !== null) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:109: characters 4-28
			$s = StringTools::lpad($s, "0", $digits);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:110: characters 3-25
		return mb_strtoupper($s);
	}

	/**
	 * Concatenates `c` to `s` until `s.length` is at least `l`.
	 * If `c` is the empty String `""` or if `l` does not exceed `s.length`,
	 * `s` is returned unchanged.
	 * If `c.length` is 1, the resulting String length is exactly `l`.
	 * Otherwise the length may exceed `l`.
	 * If `c` is null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $c
	 * @param int $l
	 * 
	 * @return string
	 */
	static public function lpad ($s, $c, $l) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:83: characters 3-26
		$cLength = mb_strlen($c);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:84: characters 3-26
		$sLength = mb_strlen($s);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:85: characters 3-45
		if (($cLength === 0) || ($sLength >= $l)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:85: characters 37-45
			return $s;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:86: characters 3-31
		$padLength = $l - $sLength;
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:87: characters 3-50
		$padCount = (int)(($padLength / $cLength));
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:88: lines 88-93
		if ($padCount > 0) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:89: characters 4-106
			$result = str_pad($s, strlen($s) + $padCount * strlen($c), $c, STR_PAD_LEFT);
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:90: characters 11-80
			if (($padCount * $cLength) >= $padLength) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:90: characters 47-53
				return $result;
			} else {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:90: characters 56-80
				return ($c . $result);
			}
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:92: characters 4-30
			return ($c . $s);
		}
	}

	/**
	 * Returns a String that can be used as a single command line argument
	 * on Unix.
	 * The input will be quoted, or escaped if necessary.
	 * 
	 * @param string $argument
	 * 
	 * @return string
	 */
	static public function quoteUnixArg ($argument) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:132: lines 132-133
		if ($argument === "") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:133: characters 4-15
			return "''";
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:135: lines 135-136
		if (!(new \EReg("[^a-zA-Z0-9_@%+=:,./-]", ""))->match($argument)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:136: characters 4-19
			return $argument;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:140: characters 3-55
		return "'" . (StringTools::replace($argument, "'", "'\"'\"'")??'null') . "'";
	}

	/**
	 * Returns a String that can be used as a single command line argument
	 * on Windows.
	 * The input will be quoted, or escaped if necessary, such that the output
	 * will be parsed as a single argument using the rule specified in
	 * http://msdn.microsoft.com/en-us/library/ms880421
	 * Examples:
	 * ```haxe
	 * quoteWinArg("abc") == "abc";
	 * quoteWinArg("ab c") == '"ab c"';
	 * ```
	 * 
	 * @param string $argument
	 * @param bool $escapeMetaCharacters
	 * 
	 * @return string
	 */
	static public function quoteWinArg ($argument, $escapeMetaCharacters) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:163: lines 163-206
		if (!(new \EReg("^[^ \x09\\\\\"]+\$", ""))->match($argument)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:168: characters 4-33
			$result = new \StringBuf();
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:169: characters 4-98
			$needquote = (HxString::indexOf($argument, " ") !== -1) || (HxString::indexOf($argument, "\x09") !== -1) || ($argument === "");
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:171: lines 171-172
			if ($needquote) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:172: characters 5-20
				$result->add("\"");
			}
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:174: characters 4-33
			$bs_buf = new \StringBuf();
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:175: lines 175-195
			$_g = 0;
			$_g1 = mb_strlen($argument);
			while ($_g < $_g1) {
				$i = $_g++;
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:176: characters 13-35
				$_g2 = HxString::charCodeAt($argument, $i);
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:176: lines 176-193
				if ($_g2 === null) {
					#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:189: lines 189-192
					if (mb_strlen($bs_buf->b) > 0) {
						#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:190: characters 8-37
						$result->add($bs_buf->b);
						#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:191: characters 8-32
						$bs_buf = new \StringBuf();
					}
					#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:193: characters 7-24
					$result->b = ($result->b??'null') . (mb_chr($_g2)??'null');
				} else {
					#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:176: characters 13-35
					if ($_g2 === 34) {
						#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:182: characters 7-34
						$bs = $bs_buf->b;
						#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:183: characters 7-21
						$result->add($bs);
						#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:184: characters 7-21
						$result->add($bs);
						#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:185: characters 7-31
						$bs_buf = new \StringBuf();
						#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:186: characters 7-24
						$result->add("\\\"");
					} else if ($_g2 === 92) {
						#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:179: characters 7-23
						$bs_buf->add("\\");
					} else {
						#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:189: lines 189-192
						if (mb_strlen($bs_buf->b) > 0) {
							#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:190: characters 8-37
							$result->add($bs_buf->b);
							#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:191: characters 8-32
							$bs_buf = new \StringBuf();
						}
						#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:193: characters 7-24
						$result->b = ($result->b??'null') . (mb_chr($_g2)??'null');
					}
				}

			}

			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:198: characters 4-33
			$result->add($bs_buf->b);
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:200: lines 200-203
			if ($needquote) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:201: characters 5-34
				$result->add($bs_buf->b);
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:202: characters 5-20
				$result->add("\"");
			}
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:205: characters 4-32
			$argument = $result->b;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:208: lines 208-220
		if ($escapeMetaCharacters) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:209: characters 4-33
			$result1 = new \StringBuf();
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:210: lines 210-216
			$_g3 = 0;
			$_g11 = mb_strlen($argument);
			while ($_g3 < $_g11) {
				$i1 = $_g3++;
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:211: characters 5-36
				$c = HxString::charCodeAt($argument, $i1);
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:212: lines 212-214
				if (StringTools::$winMetaCharacters->indexOf($c) >= 0) {
					#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:213: characters 6-30
					$result1->b = ($result1->b??'null') . (mb_chr(94)??'null');
				}
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:215: characters 5-22
				$result1->b = ($result1->b??'null') . (mb_chr($c)??'null');
			}

			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:217: characters 4-28
			return $result1->b;
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:219: characters 4-19
			return $argument;
		}
	}

	/**
	 * Replace all occurrences of the String `sub` in the String `s` by the
	 * String `by`.
	 * If `sub` is the empty String `""`, `by` is inserted after each character
	 * of `s` except the last one. If `by` is also the empty String `""`, `s`
	 * remains unchanged.
	 * If `sub` or `by` are null, the result is unspecified.
	 * 
	 * @param string $s
	 * @param string $sub
	 * @param string $by
	 * 
	 * @return string
	 */
	static public function replace ($s, $sub, $by) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:97: lines 97-99
		if ($sub === "") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:98: characters 4-89
			return implode($by, preg_split("//u", $s, -1, PREG_SPLIT_NO_EMPTY));
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:100: characters 3-40
		return str_replace($sub, $by, $s);
	}

	/**
	 * Tells if the string `s` starts with the string `start`.
	 * If `start` is `null`, the result is unspecified.
	 * If `start` is the empty String `""`, the result is true.
	 * 
	 * @param string $s
	 * @param string $start
	 * 
	 * @return bool
	 */
	static public function startsWith ($s, $start) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:44: characters 10-53
		if ($start !== "") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:44: characters 25-53
			return Boot::equal(strpos($s, $start), 0);
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:44: characters 10-53
			return true;
		}
	}

	/**
	 * Removes leading and trailing space characters of `s`.
	 * This is a convenience function for `ltrim(rtrim(s))`.
	 * 
	 * @param string $s
	 * 
	 * @return string
	 */
	static public function trim ($s) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/StringTools.hx:65: characters 3-24
		return trim($s);
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$winMetaCharacters = \Array_hx::wrap([
			59,
			44,
			32,
			40,
			41,
			37,
			33,
			94,
			34,
			60,
			62,
			38,
			124,
			10,
			13,
		]);
	}
}

Boot::registerClass(StringTools::class, 'StringTools');
StringTools::__hx__init();
