<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/haxe/ds/IntMap.hx
 */

namespace haxe\ds;

use \php\Boot;
use \haxe\IMap;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;

/**
 * IntMap allows mapping of Int keys to arbitrary values.
 * See `Map` for documentation details.
 * @see https://haxe.org/manual/std-Map.html
 */
class IntMap implements IMap {
	/**
	 * @var mixed
	 */
	public $data;

	/**
	 * Creates a new IntMap.
	 * 
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/haxe/ds/IntMap.hx:37: characters 10-34
		$this1 = [];
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/haxe/ds/IntMap.hx:37: characters 3-34
		$this->data = $this1;
	}

	/**
	 * See `Map.exists`
	 * 
	 * @param int $key
	 * 
	 * @return bool
	 */
	public function exists ($key) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/haxe/ds/IntMap.hx:58: characters 3-44
		return array_key_exists($key, $this->data);
	}

	/**
	 * See `Map.get`
	 * 
	 * @param int $key
	 * 
	 * @return mixed
	 */
	public function get ($key) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/haxe/ds/IntMap.hx:51: characters 3-42
		return ($this->data[$key] ?? null);
	}

	/**
	 * See `Map.iterator`
	 * 
	 * @return object
	 */
	public function iterator () {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/haxe/ds/IntMap.hx:84: characters 10-46
		return new NativeIndexedArrayIterator(array_values($this->data));
	}

	/**
	 * See `Map.keys`
	 * 
	 * @return object
	 */
	public function keys () {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/haxe/ds/IntMap.hx:77: characters 10-44
		return new NativeIndexedArrayIterator(array_keys($this->data));
	}
}

Boot::registerClass(IntMap::class, 'haxe.ds.IntMap');
