<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/versions/4.0.0-rc.1/std/IntIterator.hx
 */

use \php\Boot;

/**
 * IntIterator is used for implementing interval iterations.
 * It is usually not used explicitly, but through its special syntax:
 * `min...max`
 * While it is possible to assign an instance of IntIterator to a variable or
 * field, it is worth noting that IntIterator does not reset after being used
 * in a for-loop. Subsequent uses of the same instance will then have no
 * effect.
 * @see https://haxe.org/manual/lf-iterators.html
 */
class IntIterator {
	/**
	 * @var int
	 */
	public $max;
	/**
	 * @var int
	 */
	public $min;

	/**
	 * Iterates from `min` (inclusive) to `max` (exclusive).
	 * If `max <= min`, the iterator will not act as a countdown.
	 * 
	 * @param int $min
	 * @param int $max
	 * 
	 * @return void
	 */
	public function __construct ($min, $max) {
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/IntIterator.hx:47: characters 3-17
		$this->min = $min;
		#/Users/ut/haxe/versions/4.0.0-rc.1/std/IntIterator.hx:48: characters 3-17
		$this->max = $max;
	}
}

Boot::registerClass(IntIterator::class, 'IntIterator');
