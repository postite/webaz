<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: src/app/Server.hx
 */

namespace app;

use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\core\_Lazy\LazyConst;
use \tink\core\_Promise\Recover_Impl_;
use \tink\web\routing\Router0;
use \tink\http\containers\PhpContainer;
use \tink\http\SimpleHandler;
use \tink\http\middleware\Static_hx;
use \tink\http\_Response\OutgoingResponse_Impl_;
use \tink\web\routing\Context;

class Server {
	/**
	 * @return void
	 */
	static public function main () {
		#src/app/Server.hx:28: characters 3-37
		$container = PhpContainer::$inst;
		#src/app/Server.hx:32: characters 3-45
		$router = new Router0(new Root());
		#src/app/Server.hx:33: lines 33-35
		$handler = new SimpleHandler(function ($req)  use (&$router) {
			#src/app/Server.hx:34: characters 24-46
			$this1 = Context::ofRequest($req);
			#src/app/Server.hx:34: characters 11-85
			$this2 = $router->route($this1);
			$f = Recover_Impl_::ofSync(Boot::getStaticClosure(OutgoingResponse_Impl_::class, 'reportError'));
			$ret = $this2->flatMap(function ($o)  use (&$f) {
				$__hx__switch = ($o->index);
				if ($__hx__switch === 0) {
					$d = $o->params[0];
					return new SyncFuture(new LazyConst($d));
				} else if ($__hx__switch === 1) {
					$e = $o->params[0];
					return $f($e);
				}
			});
			return $ret->gather();
		});
		#src/app/Server.hx:36: characters 13-66
		$handler = (new Static_hx("./statics", "/"))->apply($handler);
		#src/app/Server.hx:37: characters 3-25
		$container->run($handler);
	}
}

Boot::registerClass(Server::class, 'app.Server');
