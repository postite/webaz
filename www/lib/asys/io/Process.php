<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx
 */

namespace asys\io;

use \php\_Boot\HxAnon;
use \tink\io\SinkObject;
use \php\Boot;
use \tink\io\std\InputSource;
use \tink\streams\StreamObject;
use \tink\io\_Worker\Worker_Impl_;
use \tink\core\FutureTrigger;
use \tink\io\_Sink\SinkYielding_Impl_;
use \haxe\io\Bytes;
use \tink\core\_Future\FutureObject;
use \sys\io\Process as IoProcess;

class Process {
	/**
	 * @var FutureTrigger
	 */
	public $exitTrigger;
	/**
	 * @var IoProcess
	 */
	public $process;
	/**
	 * @var StreamObject
	 */
	public $stderr;
	/**
	 * @var SinkObject
	 */
	public $stdin;
	/**
	 * @var StreamObject
	 */
	public $stdout;

	/**
	 * @param string $cmd
	 * @param \Array_hx $args
	 * 
	 * @return void
	 */
	public function __construct ($cmd, $args = null) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:18: characters 20-36
		$this->exitTrigger = new FutureTrigger();
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:30: characters 3-42
		$this->process = new IoProcess($cmd, $args);
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:31: characters 3-52
		$this->stdin = SinkYielding_Impl_::ofOutput("stdin", $this->process->stdin);
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:32: characters 12-56
		$input = $this->process->stderr;
		$options = null;
		$options = new HxAnon();
		$tmp = Worker_Impl_::ensure($options->worker);
		$_g = $options->chunkSize;
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:32: characters 3-56
		$this->stderr = new InputSource("stderr", $input, $tmp, Bytes::alloc(($_g === null ? 65536 : $_g)), 0);
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:33: characters 12-56
		$input1 = $this->process->stdout;
		$options1 = null;
		$options1 = new HxAnon();
		$tmp1 = Worker_Impl_::ensure($options1->worker);
		$_g1 = $options1->chunkSize;
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:33: characters 3-56
		$this->stdout = new InputSource("stdout", $input1, $tmp1, Bytes::alloc(($_g1 === null ? 65536 : $_g1)), 0);
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:34: characters 3-42
		$this->exitTrigger->trigger($this->process->exitCode());
	}

	/**
	 * @return void
	 */
	public function close () {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:47: characters 3-18
		$this->process->close();
	}

	/**
	 * @return FutureObject
	 */
	public function exitCode () {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:42: characters 3-32
		return $this->exitTrigger;
	}

	/**
	 * @return int
	 */
	public function getPid () {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:39: characters 3-55
		return $this->process->getPid();
	}

	/**
	 * @return void
	 */
	public function kill () {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/Process.hx:52: characters 3-17
		$this->process->kill();
	}
}

Boot::registerClass(Process::class, 'asys.io.Process');
