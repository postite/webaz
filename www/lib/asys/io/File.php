<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx
 */

namespace asys\io;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \tink\io\SinkObject;
use \php\Boot;
use \tink\io\std\InputSource;
use \tink\core\Noise;
use \tink\core\TypedError;
use \tink\streams\StreamObject;
use \tink\io\_Worker\Worker_Impl_;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \sys\io\File as IoFile;
use \php\_Boot\HxException;
use \tink\io\_Sink\SinkYielding_Impl_;
use \haxe\io\Bytes;
use \tink\core\_Future\FutureObject;

class File {
	/**
	 * @param string $path
	 * @param bool $binary
	 * 
	 * @return FutureObject
	 */
	static public function append ($path, $binary = true) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:255: lines 255-258
		if ($binary === null) {
			$binary = true;
		}
		$v = null;
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:256: lines 256-257
		try {
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:255: lines 255-258
			$v = Outcome::Success(IoFile::append($path, $binary));
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:257: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:255: lines 255-258
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/io/File.hx",
				"lineNumber" => 257,
				"className" => "asys.io.File",
				"methodName" => "append",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $srcPath
	 * @param string $dstPath
	 * 
	 * @return FutureObject
	 */
	static public function copy ($srcPath, $dstPath) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:261: lines 261-267
		$v = null;
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:262: lines 262-266
		try {
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:263: characters 5-39
			IoFile::copy($srcPath, $dstPath);
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:261: lines 261-267
			$v = Outcome::Success(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:266: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:261: lines 261-267
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/io/File.hx",
				"lineNumber" => 266,
				"className" => "asys.io.File",
				"methodName" => "copy",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	static public function getBytes ($path) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:228: lines 228-231
		$v = null;
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:229: lines 229-230
		try {
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:228: lines 228-231
			$v = Outcome::Success(IoFile::getBytes($path));
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:230: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:228: lines 228-231
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/io/File.hx",
				"lineNumber" => 230,
				"className" => "asys.io.File",
				"methodName" => "getBytes",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	static public function getContent ($path) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:213: lines 213-216
		$v = null;
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:214: lines 214-215
		try {
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:213: lines 213-216
			$v = Outcome::Success(IoFile::getContent($path));
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:215: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:213: lines 213-216
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/io/File.hx",
				"lineNumber" => 215,
				"className" => "asys.io.File",
				"methodName" => "getContent",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * @param bool $binary
	 * 
	 * @return FutureObject
	 */
	static public function read ($path, $binary = true) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:243: lines 243-246
		if ($binary === null) {
			$binary = true;
		}
		$v = null;
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:244: lines 244-245
		try {
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:243: lines 243-246
			$v = Outcome::Success(IoFile::read($path, $binary));
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:245: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:243: lines 243-246
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/io/File.hx",
				"lineNumber" => 245,
				"className" => "asys.io.File",
				"methodName" => "read",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * @param bool $binary
	 * 
	 * @return StreamObject
	 */
	static public function readStream ($path, $binary = true) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:21: characters 3-68
		if ($binary === null) {
			$binary = true;
		}
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:21: characters 10-68
		$input = IoFile::read($path);
		$options = null;
		$options = new HxAnon();
		$tmp = Worker_Impl_::ensure($options->worker);
		$_g = $options->chunkSize;
		return new InputSource("asys read stream", $input, $tmp, Bytes::alloc(($_g === null ? 65536 : $_g)), 0);
	}

	/**
	 * @param string $path
	 * @param Bytes $bytes
	 * 
	 * @return FutureObject
	 */
	static public function saveBytes ($path, $bytes) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:234: lines 234-240
		$v = null;
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:235: lines 235-239
		try {
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:236: characters 5-39
			IoFile::saveBytes($path, $bytes);
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:234: lines 234-240
			$v = Outcome::Success(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:239: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:234: lines 234-240
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/io/File.hx",
				"lineNumber" => 239,
				"className" => "asys.io.File",
				"methodName" => "saveBytes",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * @param string $content
	 * 
	 * @return FutureObject
	 */
	static public function saveContent ($path, $content) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:219: lines 219-225
		$v = null;
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:220: lines 220-224
		try {
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:221: characters 5-43
			IoFile::saveContent($path, $content);
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:219: lines 219-225
			$v = Outcome::Success(Noise::Noise());
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:224: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:219: lines 219-225
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/io/File.hx",
				"lineNumber" => 224,
				"className" => "asys.io.File",
				"methodName" => "saveContent",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * @param bool $binary
	 * 
	 * @return FutureObject
	 */
	static public function write ($path, $binary = true) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:249: lines 249-252
		if ($binary === null) {
			$binary = true;
		}
		$v = null;
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:250: lines 250-251
		try {
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:249: lines 249-252
			$v = Outcome::Success(IoFile::write($path, $binary));
		} catch (\Throwable $__hx__caught_e) {
			$__hx__real_e = ($__hx__caught_e instanceof HxException ? $__hx__caught_e->e : $__hx__caught_e);
			$e = $__hx__real_e;
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:251: characters 41-43
			$v1 = "" . (\Std::string($e)??'null');
			#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:249: lines 249-252
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/io/File.hx",
				"lineNumber" => 251,
				"className" => "asys.io.File",
				"methodName" => "write",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * @param bool $binary
	 * 
	 * @return SinkObject
	 */
	static public function writeStream ($path, $binary = true) {
		#/Users/ut/haxe/haxe_libraries/asys/0.3.0/github/9ce3b0cdbd8563363bffdd1fc78b5df4d2765e7f/asys/io/File.hx:29: characters 3-69
		if ($binary === null) {
			$binary = true;
		}
		return SinkYielding_Impl_::ofOutput("asys write stream", IoFile::write($path));
	}
}

Boot::registerClass(File::class, 'asys.io.File');
