<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx
 */

namespace sys;

use \php\_Boot\HxAnon;
use \php\Boot;
use \php\_Boot\HxException;
use \haxe\io\Path;

/**
 * This class allows you to get information about the files and directories.
 * See `sys.io.File` for the complementary file API.
 */
class FileSystem {
	/**
	 * Returns the full path of the file or directory specified by `relPath`,
	 * which is relative to the current working directory. The path doesn't
	 * have to exist.
	 * If `relPath` is null, the result is unspecified.
	 * 
	 * @param string $relPath
	 * 
	 * @return string
	 */
	static public function absolutePath ($relPath) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:71: characters 3-47
		if (Path::isAbsolute($relPath)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:71: characters 33-47
			return $relPath;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:72: characters 3-44
		return Path::join(\Array_hx::wrap([
			\Sys::getCwd(),
			$relPath,
		]));
	}

	/**
	 * Creates a directory specified by `path`.
	 * This method is recursive: The parent directories don't have to exist.
	 * If the directory cannot be created, an exception is thrown.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return void
	 */
	static public function createDirectory ($path) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:93: characters 3-36
		clearstatcache(true, $path);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:94: lines 94-95
		if (!is_dir($path)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:95: characters 4-33
			mkdir($path, 493, true);
		}
	}

	/**
	 * Tells if the file or directory specified by `path` is a directory.
	 * If `path` is not a valid file system entry or if its destination is not
	 * accessible, an exception is thrown.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return bool
	 */
	static public function isDirectory ($path) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:88: characters 3-36
		clearstatcache(true, $path);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:89: characters 3-29
		return is_dir($path);
	}

	/**
	 * Returns the names of all files and directories in the directory specified
	 * by `path`.
	 * If `path` does not denote a valid directory, an exception is thrown.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return \Array_hx
	 */
	static public function readDirectory ($path) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:107: characters 3-17
		$list = new \Array_hx();
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:108: characters 3-34
		$dir = opendir($path);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:109: characters 3-12
		$file = null;
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:110: lines 110-114
		while (true) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:110: characters 10-38
			$file = readdir($dir);
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:110: lines 110-114
			if (!($file !== false)) {
				break;
			}
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:111: lines 111-113
			if (($file !== ".") && ($file !== "..")) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:112: characters 5-20
				$list->arr[$list->length] = $file;
				++$list->length;
			}
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:115: characters 3-23
		closedir($dir);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:116: characters 9-20
		return $list;
	}

	/**
	 * Returns `FileStat` information on the file or directory specified by
	 * `path`.
	 * If `path` is null, the result is unspecified.
	 * 
	 * @param string $path
	 * 
	 * @return object
	 */
	static public function stat ($path) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:46: characters 3-36
		clearstatcache(true, $path);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:47: characters 3-32
		$info = stat($path);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:48: characters 3-27
		if ($info === false) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:48: characters 22-27
			throw new HxException("Unable to stat " . ($path??'null'));
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:49: characters 3-31
		$info1 = $info;
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:54: characters 12-47
		$tmp = \Date::fromTime($info1["atime"] * 1000);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:55: characters 12-47
		$tmp1 = \Date::fromTime($info1["mtime"] * 1000);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:56: characters 12-47
		$tmp2 = \Date::fromTime($info1["ctime"] * 1000);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/sys/FileSystem.hx:51: lines 51-63
		return new HxAnon([
			"gid" => $info1["gid"],
			"uid" => $info1["uid"],
			"atime" => $tmp,
			"mtime" => $tmp1,
			"ctime" => $tmp2,
			"dev" => $info1["dev"],
			"ino" => $info1["ino"],
			"nlink" => $info1["nlink"],
			"rdev" => $info1["rdev"],
			"size" => $info1["size"],
			"mode" => $info1["mode"],
		]);
	}
}

Boot::registerClass(FileSystem::class, 'sys.FileSystem');
