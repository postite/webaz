<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx
 */

use \php\_Boot\HxAnon;
use \php\Boot;
use \php\_Boot\HxClass;
use \php\_Boot\HxString;
use \php\_Boot\HxClosure;
use \php\_Boot\HxEnum;

/**
 * The Haxe Reflection API allows retrieval of type information at runtime.
 * This class complements the more lightweight Reflect class, with a focus on
 * class and enum instances.
 * @see https://haxe.org/manual/types.html
 * @see https://haxe.org/manual/std-reflection.html
 */
class Type {
	/**
	 * Returns the class of `o`, if `o` is a class instance.
	 * If `o` is null or of a different type, null is returned.
	 * In general, type parameter information cannot be obtained at runtime.
	 * 
	 * @param mixed $o
	 * 
	 * @return Class
	 */
	static public function getClass ($o) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:44: lines 44-51
		if (is_object($o) && !($o instanceof HxClass) && !($o instanceof HxEnum)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:45: characters 4-54
			$cls = Boot::getClass(get_class($o));
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:46: characters 11-54
			if ($cls === Boot::getClass(HxAnon::class)) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:46: characters 38-42
				return null;
			} else {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:46: characters 45-53
				return $cls;
			}
		} else if (is_string($o)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:48: characters 4-22
			return Boot::getClass('String');
		} else {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:50: characters 4-15
			return null;
		}
	}

	/**
	 * Returns the name of class `c`, including its path.
	 * If `c` is inside a package, the package structure is returned dot-
	 * separated, with another dot separating the class name:
	 * `pack1.pack2.(...).packN.ClassName`
	 * If `c` is a sub-type of a Haxe module, that module is not part of the
	 * package structure.
	 * If `c` has no package, the class name is returned.
	 * If `c` is null, the result is unspecified.
	 * The class name does not include any type parameters.
	 * 
	 * @param Class $c
	 * 
	 * @return string
	 */
	static public function getClassName ($c) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:67: characters 3-28
		if ($c === null) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:67: characters 17-28
			return null;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:68: characters 3-34
		return Boot::getHaxeName($c);
	}

	/**
	 * Returns the name of enum `e`, including its path.
	 * If `e` is inside a package, the package structure is returned dot-
	 * separated, with another dot separating the enum name:
	 * `pack1.pack2.(...).packN.EnumName`
	 * If `e` is a sub-type of a Haxe module, that module is not part of the
	 * package structure.
	 * If `e` has no package, the enum name is returned.
	 * If `e` is null, the result is unspecified.
	 * The enum name does not include any type parameters.
	 * 
	 * @param Enum $e
	 * 
	 * @return string
	 */
	static public function getEnumName ($e) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:72: characters 3-30
		return Type::getClassName($e);
	}

	/**
	 * Returns a list of the instance fields of class `c`, including
	 * inherited fields.
	 * This only includes fields which are known at compile-time. In
	 * particular, using `getInstanceFields(getClass(obj))` will not include
	 * any fields which were added to `obj` at runtime.
	 * The order of the fields in the returned Array is unspecified.
	 * If `c` is null, the result is unspecified.
	 * (As3) This method only returns instance fields that are public.
	 * 
	 * @param Class $c
	 * 
	 * @return \Array_hx
	 */
	static public function getInstanceFields ($c) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:169: characters 3-29
		if ($c === null) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:169: characters 18-29
			return null;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:170: lines 170-176
		if ($c === Boot::getClass('String')) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:171: lines 171-175
			return \Array_hx::wrap([
				"substr",
				"charAt",
				"charCodeAt",
				"indexOf",
				"lastIndexOf",
				"split",
				"toLowerCase",
				"toUpperCase",
				"toString",
				"length",
			]);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:178: characters 3-67
		$reflection = new \ReflectionClass($c->phpClassName);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:180: characters 17-34
		$this1 = [];
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:180: characters 3-35
		$methods = $this1;
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:181: characters 18-41
		$data = $reflection->getMethods();
		$_g_current = 0;
		$_g_length = count($data);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:181: lines 181-188
		while ($_g_current < $_g_length) {
			$method = $data[$_g_current++];
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:182: lines 182-187
			if (!$method->isStatic()) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:183: characters 5-33
				$name = $method->getName();
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:184: lines 184-186
				if (!(($name === "__construct") || (HxString::indexOf($name, "__hx_") === 0))) {
					#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:185: characters 6-30
					array_push($methods, $name);
				}
			}
		}

		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:190: characters 20-37
		$this2 = [];
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:190: characters 3-38
		$properties = $this2;
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:191: characters 20-46
		$data1 = $reflection->getProperties();
		$_g1_current = 0;
		$_g1_length = count($data1);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:191: lines 191-198
		while ($_g1_current < $_g1_length) {
			$property = $data1[$_g1_current++];
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:192: lines 192-197
			if (!$property->isStatic()) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:193: characters 5-35
				$name1 = $property->getName();
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:194: lines 194-196
				if (!(($name1 === "__construct") || (HxString::indexOf($name1, "__hx_") === 0))) {
					#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:195: characters 6-33
					array_push($properties, $name1);
				}
			}
		}

		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:199: characters 3-13
		$properties = array_diff($properties, $methods);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:201: characters 3-56
		$fields = array_merge($properties, $methods);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:203: characters 3-44
		return \Array_hx::wrap($fields);
	}

	/**
	 * Resolves a class by name.
	 * If `name` is the path of an existing class, that class is returned.
	 * Otherwise null is returned.
	 * If `name` is null or the path to a different type, the result is
	 * unspecified.
	 * The class name must not include any type parameters.
	 * 
	 * @param string $name
	 * 
	 * @return Class
	 */
	static public function resolveClass ($name) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:76: characters 3-32
		if ($name === null) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:76: characters 21-32
			return null;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:77: lines 77-85
		if ($name === "Bool") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:81: characters 18-34
			return Boot::getClass('Bool');
		} else if ($name === "Class") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:83: characters 18-35
			return Boot::getClass('Class');
		} else if ($name === "Dynamic") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:78: characters 20-39
			return Boot::getClass('Dynamic');
		} else if ($name === "Enum") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:84: characters 17-33
			return Boot::getClass('Enum');
		} else if ($name === "Float") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:80: characters 18-35
			return Boot::getClass('Float');
		} else if ($name === "Int") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:79: characters 16-31
			return Boot::getClass('Int');
		} else if ($name === "String") {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:82: characters 19-32
			return Boot::getClass('String');
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:87: characters 3-40
		$phpClass = Boot::getPhpName($name);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:88: characters 3-88
		if (!class_exists($phpClass) && !interface_exists($phpClass)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:88: characters 77-88
			return null;
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:90: characters 3-41
		$hxClass = Boot::getClass($phpClass);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:92: characters 3-22
		return $hxClass;
	}

	/**
	 * Returns the runtime type of value `v`.
	 * The result corresponds to the type `v` has at runtime, which may vary
	 * per platform. Assumptions regarding this should be minimized to avoid
	 * surprises.
	 * 
	 * @param mixed $v
	 * 
	 * @return \ValueType
	 */
	static public function typeof ($v) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:241: characters 3-30
		if ($v === null) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:241: characters 18-30
			return \ValueType::TNull();
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:243: lines 243-251
		if (is_object($v)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:244: characters 4-47
			if (($v instanceof \Closure) || ($v instanceof HxClosure)) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:244: characters 31-47
				return \ValueType::TFunction();
			}
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:245: characters 4-43
			if (($v instanceof \StdClass)) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:245: characters 29-43
				return \ValueType::TObject();
			}
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:246: characters 4-39
			if (($v instanceof HxClass)) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:246: characters 25-39
				return \ValueType::TObject();
			}
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:248: characters 4-53
			$hxClass = Boot::getClass(get_class($v));
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:249: characters 4-55
			if (($v instanceof HxEnum)) {
				#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:249: characters 29-55
				return \ValueType::TEnum($hxClass);
			}
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:250: characters 4-31
			return \ValueType::TClass($hxClass);
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:253: characters 3-32
		if (is_bool($v)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:253: characters 20-32
			return \ValueType::TBool();
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:254: characters 3-30
		if (is_int($v)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:254: characters 19-30
			return \ValueType::TInt();
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:255: characters 3-34
		if (is_float($v)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:255: characters 21-34
			return \ValueType::TFloat();
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:256: characters 3-43
		if (is_string($v)) {
			#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:256: characters 22-43
			return \ValueType::TClass(Boot::getClass('String'));
		}
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/_std/Type.hx:258: characters 3-18
		return \ValueType::TUnknown();
	}
}

Boot::registerClass(Type::class, 'Type');
