<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: src/apis/ImageApi.hx
 */

namespace apis;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \image\Engine;
use \tink\core\Noise;
use \apis\_ImageApi\Taille_Impl_;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\core\_Future\Future_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \asys\FileSystem;
use \image\Image;
use \haxe\io\Path;
use \tink\core\_Future\FutureObject;

class ImageApi {
	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	static public function getModTime ($path) {
		#src/apis/ImageApi.hx:42: lines 42-47
		$ret = Promise_Impl_::next(FileSystem::stat($path), function ($st) {
			#src/apis/ImageApi.hx:42: characters 45-63
			return new SyncFuture(new LazyConst(Outcome::Success($st->mtime->getTime())));
		})->map(function ($o) {
			#src/apis/ImageApi.hx:43: lines 43-46
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				#src/apis/ImageApi.hx:44: characters 18-19
				$s = $o->params[0];
				#src/apis/ImageApi.hx:44: characters 22-23
				return $s;
			} else if ($__hx__switch === 1) {
				#src/apis/ImageApi.hx:45: characters 22-24
				return .0;
			}
		});
		#src/apis/ImageApi.hx:42: lines 42-47
		$ret1 = $ret->gather()->map(Boot::getStaticClosure(Outcome::class, 'Success'));
		return $ret1->gather();
	}

	/**
	 * @param string $path
	 * @param Resizr $taille
	 * 
	 * @return FutureObject
	 */
	static public function getResizedImage ($path, $taille = null) {
		#src/apis/ImageApi.hx:13: lines 13-14
		if ($taille === null) {
			#src/apis/ImageApi.hx:14: characters 4-26
			$taille = Taille_Impl_::$Square;
		}
		#src/apis/ImageApi.hx:16: lines 16-17
		if (((\Array_hx::wrap([
			"gif",
			"jpg",
			"jpeg",
			"png",
		]))->indexOf(mb_strtolower(Path::extension($path))) === -1) || ($taille === Taille_Impl_::$Normal)) {
			#src/apis/ImageApi.hx:17: characters 11-38
			return new SyncFuture(new LazyConst(Outcome::Success("polo" . ($path??'null'))));
		}
		#src/apis/ImageApi.hx:18: characters 3-59
		$dir = (Path::addTrailingSlash(Path::directory($path))??'null') . "thumb";
		#src/apis/ImageApi.hx:19: characters 3-78
		$thumbPath = "" . ($dir??'null') . "/" . (Taille_Impl_::toName($taille)??'null') . (Path::withoutDirectory($path)??'null');
		#src/apis/ImageApi.hx:20: characters 3-81
		$relativeThumbPath = ($dir??'null') . "/" . (Taille_Impl_::toName($taille)??'null') . (Path::withoutDirectory($path)??'null');
		#src/apis/ImageApi.hx:22: lines 22-38
		return Promise_Impl_::next(Promise_Impl_::next(Promise_Impl_::next(Future_Impl_::next(FileSystem::exists($thumbPath), function ($exists)  use (&$thumbPath, &$path) {
			#src/apis/ImageApi.hx:23: characters 47-68
			$tmp = ImageApi::getModTime("" . ($path??'null'));
			#src/apis/ImageApi.hx:23: lines 23-24
			return Promise_Impl_::next(Promise_Impl_::inParallel(\Array_hx::wrap([
				$tmp,
				ImageApi::getModTime($thumbPath),
			])), function ($ret)  use (&$exists) {
				#src/apis/ImageApi.hx:24: characters 18-48
				return new SyncFuture(new LazyConst(Outcome::Success(!$exists || (($ret->arr[0] ?? null) > ($ret->arr[1] ?? null)))));
			});
		}), function ($b)  use (&$dir) {
			#src/apis/ImageApi.hx:26: lines 26-29
			if ($b) {
				#src/apis/ImageApi.hx:27: characters 6-49
				return FileSystem::createDirectory("" . ($dir??'null'));
			} else {
				#src/apis/ImageApi.hx:29: characters 13-32
				return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
			}
		}), function ($p)  use (&$thumbPath, &$path, &$taille) {
			#src/apis/ImageApi.hx:31: lines 31-37
			return Image::resize("" . ($path??'null'), $thumbPath, new HxAnon([
				"engine" => Engine::GD(),
				"width" => $taille->w,
				"height" => $taille->h,
				"crop" => $taille->crop,
				"focus" => $taille->focus,
			]));
		}), function ($p1)  use (&$relativeThumbPath) {
			#src/apis/ImageApi.hx:38: characters 15-32
			return new SyncFuture(new LazyConst(Outcome::Success($relativeThumbPath)));
		});
	}

	/**
	 * @return void
	 */
	public function __construct () {
	}
}

Boot::registerClass(ImageApi::class, 'apis.ImageApi');
