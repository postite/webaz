<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: src/apis/tinklite/RecLiteApi.hx
 */

namespace apis\tinklite;

use \php\_Boot\HxDynamicStr;
use \tink\sql\_Expr\Field_Impl_;
use \php\_Boot\HxAnon;
use \php\Boot;
use \tink\core\_Promise\Promise_Impl_;
use \tink\sql\drivers\php\MySQLi;
use \tink\core\_Future\FutureObject;

class RecLiteApi {
	/**
	 * @var RecLiteApi
	 */
	static public $_instance;

	/**
	 * @var Db
	 */
	public $db;

	/**
	 * @return FutureObject
	 */
	static public function create () {
		#src/apis/tinklite/RecLiteApi.hx:59: characters 8-14
		RecLiteApi::init();
		#src/apis/tinklite/RecLiteApi.hx:60: characters 5-36
		return RecLiteApi::get_instance()->db->Rec->create();
	}

	/**
	 * @return RecLiteApi
	 */
	static public function get_instance () {
		#src/apis/tinklite/RecLiteApi.hx:22: lines 22-23
		if (RecLiteApi::$_instance === null) {
			#src/apis/tinklite/RecLiteApi.hx:23: characters 9-36
			RecLiteApi::$_instance = new RecLiteApi();
		}
		#src/apis/tinklite/RecLiteApi.hx:24: characters 9-25
		return RecLiteApi::$_instance;
	}

	/**
	 * @return RecLiteApi
	 */
	static public function init () {
		#src/apis/tinklite/RecLiteApi.hx:64: lines 64-67
		$this1 = new MySQLi(new HxAnon([
			"user" => "root",
			"password" => "",
		]));
		$driver = $this1;
		#src/apis/tinklite/RecLiteApi.hx:68: lines 68-69
		RecLiteApi::get_instance()->db = new Db("tinksqlrec", $driver);
		#src/apis/tinklite/RecLiteApi.hx:72: characters 3-18
		return RecLiteApi::get_instance();
	}

	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param int $id
	 * 
	 * @return FutureObject
	 */
	public function get ($id) {
		#src/apis/tinklite/RecLiteApi.hx:30: lines 30-33
		return $this->db->Rec->_where(function ($Rec)  use (&$id) {
			#src/apis/tinklite/RecLiteApi.hx:32: characters 16-28
			$this1 = $id;
			return Field_Impl_::eqFloat($Rec->id, $this1);
		})->first();
	}

	/**
	 * @param mixed $limit
	 * @param mixed $orderBy
	 * 
	 * @return FutureObject
	 */
	public function getAll ($limit = null, $orderBy = null) {
		#src/apis/tinklite/RecLiteApi.hx:27: characters 9-33
		return $this->db->Rec->all();
	}

	/**
	 * @param string $filename
	 * @param string $title
	 * @param string $desc
	 * @param int $length
	 * @param string $img
	 * @param \Date $date
	 * 
	 * @return FutureObject
	 */
	public function saveRec ($filename, $title, $desc, $length, $img, $date = null) {
		#src/apis/tinklite/RecLiteApi.hx:39: characters 9-29
		$rec = new HxAnon();
		#src/apis/tinklite/RecLiteApi.hx:41: characters 9-24
		$rec->title = $title;
		#src/apis/tinklite/RecLiteApi.hx:42: characters 9-30
		$rec->soundUrl = $filename;
		#src/apis/tinklite/RecLiteApi.hx:43: characters 9-22
		$rec->desc = $desc;
		#src/apis/tinklite/RecLiteApi.hx:44: characters 9-26
		HxDynamicStr::wrap($rec)->length = $length;
		#src/apis/tinklite/RecLiteApi.hx:45: characters 9-25
		$rec->imageUrl = $img;
		#src/apis/tinklite/RecLiteApi.hx:48: characters 9-37
		return Promise_Impl_::ofSpecific($this->db->Rec->insertOne($rec));
	}

	/**
	 * @return string
	 */
	public function tst () {
		#src/apis/tinklite/RecLiteApi.hx:54: characters 9-23
		return "hellu";
	}
}

Boot::registerClass(RecLiteApi::class, 'apis.tinklite.RecLiteApi');
Boot::registerGetters('apis\\tinklite\\RecLiteApi', [
	'instance' => true
]);
