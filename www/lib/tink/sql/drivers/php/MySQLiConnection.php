<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx
 */

namespace tink\sql\drivers\php;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \tink\sql\drivers\_MySql\MySql_Impl_;
use \php\Boot;
use \tink\core\Noise;
use \tink\sql\Connection;
use \tink\streams\_Stream\Stream_Impl_;
use \tink\core\TypedError;
use \tink\core\Outcome;
use \tink\sql\format\Sanitizer;
use \tink\sql\format\MySqlFormatter;
use \tink\core\_Lazy\LazyConst;
use \tink\sql\Query;
use \tink\sql\drivers\php\_MySQLi\ResultSet_Impl_;
use \tink\core\_Promise\Next_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \haxe\io\Bytes;
use \tink\core\_Future\FutureObject;

class MySQLiConnection implements Sanitizer, Connection {
	/**
	 * @var \mysqli
	 */
	public $cnx;
	/**
	 * @var mixed
	 */
	public $db;
	/**
	 * @var MySqlFormatter
	 */
	public $formatter;

	/**
	 * @param mixed $db
	 * @param \mysqli $cnx
	 * 
	 * @return void
	 */
	public function __construct ($db, $cnx) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:43: characters 5-17
		$this->db = $db;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:44: characters 5-19
		$this->cnx = $cnx;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:45: characters 5-46
		$this->formatter = new MySqlFormatter($this);
	}

	/**
	 * @param Query $query
	 * 
	 * @return mixed
	 */
	public function execute ($query) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:61: lines 61-83
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:63: lines 63-82
		$__hx__switch = ($query->index);
		if ($__hx__switch === 0 || $__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:65: characters 24-31
			$tmp = $_gthis->formatter->format($query);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:65: lines 65-67
			return Stream_Impl_::promise(Promise_Impl_::next($_gthis->run($tmp), function ($res)  use (&$query, &$_gthis) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:66: characters 11-82
				return new SyncFuture(new LazyConst(Outcome::Success(Stream_Impl_::ofIterator(ResultSet_Impl_::nestedIterator($res, $_gthis->formatter->isNested($query))))));
			}));
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:71: characters 9-16
			$tmp1 = $_gthis->formatter->format($query);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:71: characters 9-63
			return Promise_Impl_::next($_gthis->run($tmp1), function ($_)  use (&$_gthis) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:71: characters 34-62
				return new SyncFuture(new LazyConst(Outcome::Success($_gthis->cnx->insert_id)));
			});
		} else if ($__hx__switch === 3 || $__hx__switch === 4) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:73: characters 9-16
			$tmp2 = $_gthis->formatter->format($query);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:73: characters 9-75
			return Promise_Impl_::next($_gthis->run($tmp2), function ($_1)  use (&$_gthis) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:73: characters 34-74
				return new SyncFuture(new LazyConst(Outcome::Success(new HxAnon(["rowsAffected" => $_gthis->cnx->affected_rows]))));
			});
		} else if ($__hx__switch === 5 || $__hx__switch === 6 || $__hx__switch === 7) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:69: characters 9-16
			$tmp3 = $_gthis->formatter->format($query);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:69: characters 9-47
			return Promise_Impl_::next($_gthis->run($tmp3), function ($_2) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:69: characters 34-46
				return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
			});
		} else if ($__hx__switch === 8) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:75: characters 9-16
			$tmp4 = $_gthis->formatter->format($query);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:75: lines 75-77
			return Promise_Impl_::next($_gthis->run($tmp4), Next_Impl_::ofSafeSync(function ($res1)  use (&$_gthis) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:76: characters 18-68
				$_g = new \Array_hx();
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:76: characters 31-34
				$row = ResultSet_Impl_::iterator($res1);
				while ($row->hasNext()) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:76: characters 19-67
					$row1 = $row->next();
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:76: characters 36-67
					$x = $_gthis->formatter->parseColumn($row1);
					$_g->arr[$_g->length] = $x;
					++$_g->length;
				}

				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:76: characters 18-68
				return $_g;
			}));
		} else if ($__hx__switch === 9) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:79: characters 9-16
			$tmp5 = $_gthis->formatter->format($query);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:79: lines 79-81
			return Promise_Impl_::next($_gthis->run($tmp5), Next_Impl_::ofSafeSync(function ($res2)  use (&$_gthis) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:80: characters 18-27
				$_gthis1 = $_gthis->formatter;
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:80: characters 38-65
				$_g1 = new \Array_hx();
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:80: characters 51-54
				$row2 = ResultSet_Impl_::iterator($res2);
				while ($row2->hasNext()) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:80: characters 39-64
					$row3 = $row2->next();
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:80: characters 56-64
					$_g1->arr[$_g1->length] = $row3;
					++$_g1->length;
				}

				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:80: characters 11-66
				return $_gthis1->parseKeys($_g1);
			}));
		}
	}

	/**
	 * @return MySqlFormatter
	 */
	public function getFormatter () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:59: characters 5-21
		return $this->formatter;
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	public function ident ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:56: characters 5-62
		return MySql_Impl_::getSanitizer(null)->ident($s);
	}

	/**
	 * @param string $query
	 * 
	 * @return FutureObject
	 */
	public function run ($query) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:86: characters 19-35
		$_g = $this->cnx->query($query);
		if ($_g === false) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:87: characters 7-50
			return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError($this->cnx->errno, $this->cnx->error, new HxAnon([
				"fileName" => "tink/sql/drivers/php/MySQLi.hx",
				"lineNumber" => 87,
				"className" => "tink.sql.drivers.php.MySQLiConnection",
				"methodName" => "run",
			])))));
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:88: characters 7-26
			return new SyncFuture(new LazyConst(Outcome::Success($_g)));
		}
	}

	/**
	 * @param mixed $v
	 * 
	 * @return string
	 */
	public function value ($v) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:49: characters 5-53
		if (Boot::is($v, Boot::getClass('Bool'))) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:49: characters 33-53
			if ($v) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:49: characters 38-42
				return "true";
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:49: characters 47-52
				return "false";
			}
		}
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:50: characters 5-49
		if (($v === null) || Boot::is($v, Boot::getClass('Int'))) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:50: characters 38-49
			return "" . (\Std::string($v)??'null');
		}
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:51: characters 5-57
		if (($v instanceof Bytes)) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:51: characters 27-57
			$v = $v->toString();
		}
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/drivers/php/MySQLi.hx:52: characters 5-48
		return "'" . ($this->cnx->real_escape_string("" . (\Std::string($v)??'null'))??'null') . "'";
	}
}

Boot::registerClass(MySQLiConnection::class, 'tink.sql.drivers.php.MySQLiConnection');
