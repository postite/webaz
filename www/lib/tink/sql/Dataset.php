<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Dataset.hx
 */

namespace tink\sql;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\core\TypedError;
use \tink\streams\StreamObject;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\streams\_RealStream\RealStream_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;

class Dataset {
	/**
	 * @var Connection
	 */
	public $cnx;

	/**
	 * @param Connection $cnx
	 * 
	 * @return void
	 */
	public function __construct ($cnx) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Dataset.hx:175: characters 5-19
		$this->cnx = $cnx;
	}

	/**
	 * @return FutureObject
	 */
	public function all () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Dataset.hx:188: characters 5-30
		return RealStream_Impl_::collect($this->stream());
	}

	/**
	 * @return FutureObject
	 */
	public function first () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Dataset.hx:191: lines 191-195
		return Promise_Impl_::next($this->all(), function ($r) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Dataset.hx:192: lines 192-195
			if ($r->length === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Dataset.hx:193: characters 9-82
				return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "The requested item was not found", new HxAnon([
					"fileName" => "tink/sql/Dataset.hx",
					"lineNumber" => 193,
					"className" => "tink.sql.Dataset",
					"methodName" => "first",
				])))));
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Dataset.hx:194: characters 9-30
				return new SyncFuture(new LazyConst(Outcome::Success(($r->arr[0] ?? null))));
			}
		});
	}

	/**
	 * @return StreamObject
	 */
	public function stream () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Dataset.hx:185: characters 5-34
		return $this->cnx->execute($this->toQuery());
	}

	/**
	 * @param object $limit
	 * 
	 * @return Query
	 */
	public function toQuery ($limit = null) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Dataset.hx:179: characters 5-10
		throw new HxException("implement");
	}

	/**
	 * @param Dataset $other
	 * @param bool $distinct
	 * 
	 * @return Union
	 */
	public function union ($other, $distinct = true) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Dataset.hx:182: characters 5-49
		if ($distinct === null) {
			$distinct = true;
		}
		return new Union($this->cnx, $this, $other, $distinct);
	}
}

Boot::registerClass(Dataset::class, 'tink.sql.Dataset');
