<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx
 */

namespace tink\sql;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\ds\StringMap;
use \tink\sql\format\Formatter;
use \php\_NativeIndexedArray\NativeIndexedArrayIterator;

class Schema {
	/**
	 * @var StringMap
	 */
	public $columns;
	/**
	 * @var StringMap
	 */
	public $keys;

	/**
	 * @param StringMap $a
	 * @param StringMap $b
	 * 
	 * @return \Array_hx
	 */
	static public function mergeKeys ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:85: characters 12-39
		$_g = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:85: characters 25-33
		$key = new NativeIndexedArrayIterator(array_map("strval", array_keys($a->data)));
		while ($key->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:85: characters 13-38
			$key1 = $key->next();
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:85: characters 35-38
			$_g->arr[$_g->length] = $key1;
			++$_g->length;
		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:85: lines 85-88
		$_g1 = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:86: characters 19-27
		$key2 = new NativeIndexedArrayIterator(array_map("strval", array_keys($b->data)));
		while ($key2->hasNext()) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:86: lines 86-87
			$key3 = $key2->next();
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:87: characters 9-32
			if (!array_key_exists($key3, $a->data)) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:87: characters 29-32
				$_g1->arr[$_g1->length] = $key3;
				++$_g1->length;
			}
		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:85: lines 85-88
		return $_g->concat($_g1);
	}

	/**
	 * @param \Array_hx $columns
	 * @param \Array_hx $keys
	 * 
	 * @return void
	 */
	public function __construct ($columns, $keys) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:12: lines 12-15
		$_g = new StringMap();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:13: lines 13-14
		$_g1 = 0;
		while ($_g1 < $columns->length) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:13: characters 12-18
			$column = ($columns->arr[$_g1] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:13: lines 13-14
			++$_g1;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:14: characters 9-30
			$_g->data[$column->name] = $column;
		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:12: lines 12-15
		$this->columns = $_g;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:16: lines 16-19
		$_g2 = new StringMap();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:17: lines 17-18
		$_g3 = 0;
		while ($_g3 < $keys->length) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:17: characters 12-15
			$key = ($keys->arr[$_g3] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:17: lines 17-18
			++$_g3;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:18: characters 9-28
			$_g2->data[$this->keyName($key)] = $key;
		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:16: lines 16-19
		$this->keys = $_g2;
	}

	/**
	 * @param Schema $that
	 * @param Formatter $formatter
	 * 
	 * @return \Array_hx
	 */
	public function diff ($that, $formatter) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:45: characters 5-33
		$changes = new \Array_hx();
		$post = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:47: lines 47-69
		$_g = 0;
		$_g1 = Schema::mergeKeys($this->columns, $that->columns);
		while ($_g < $_g1->length) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:47: characters 10-13
			$key = ($_g1->arr[$_g] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:47: lines 47-69
			++$_g;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:48: characters 34-51
			$_g2 = ($that->columns->data[$key] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:48: characters 15-32
			$_g11 = ($this->columns->data[$key] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:49: lines 49-68
			if ($_g11 === null) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:50: lines 50-56
				if ($this->hasAutoIncrement($_g2)) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:51: characters 13-55
					$without = $this->withoutAutoIncrement($_g2);
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:52: characters 13-48
					$changes->length = array_unshift($changes->arr, AlterTableOperation::AddColumn($without));
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:53: characters 13-51
					$post->arr[$post->length] = AlterTableOperation::AlterColumn($_g2, $without);
					++$post->length;

				} else {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:55: characters 13-46
					$changes->length = array_unshift($changes->arr, AlterTableOperation::AddColumn($_g2));
				}
			} else if ($_g2 === null) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:57: characters 31-64
				$changes->arr[$changes->length] = AlterTableOperation::DropColumn($_g11);
				++$changes->length;
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:59: lines 59-60
				if ($formatter->defineColumn($_g11) === $formatter->defineColumn($_g2)) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:60: characters 13-21
					continue;
				}
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:61: lines 61-68
				if ($this->hasAutoIncrement($_g2)) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:62: characters 13-51
					$without1 = $this->withoutAutoIncrement($_g2);
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:63: lines 63-64
					if ($formatter->defineColumn($_g11) !== $formatter->defineColumn($without1)) {
						#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:64: characters 15-55
						$changes->length = array_unshift($changes->arr, AlterTableOperation::AlterColumn($without1, $_g11));
					}
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:65: characters 13-47
					$post->arr[$post->length] = AlterTableOperation::AlterColumn($_g2, $without1);
					++$post->length;

				} else {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:67: characters 13-44
					$changes->arr[$changes->length] = AlterTableOperation::AlterColumn($_g2, $_g11);
					++$changes->length;
				}
			}

		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:70: lines 70-80
		$_g21 = 0;
		$_g3 = Schema::mergeKeys($this->keys, $that->keys);
		while ($_g21 < $_g3->length) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:70: characters 10-14
			$name = ($_g3->arr[$_g21] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:70: lines 70-80
			++$_g21;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:71: characters 32-47
			$_g22 = ($that->keys->data[$name] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:71: characters 15-30
			$_g31 = ($this->keys->data[$name] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:72: lines 72-79
			if ($_g31 === null) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:72: characters 29-56
				$changes->arr[$changes->length] = AlterTableOperation::AddKey($_g22);
				++$changes->length;
			} else if ($_g22 === null) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:74: characters 11-44
				$changes->length = array_unshift($changes->arr, AlterTableOperation::DropKey($_g31));
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:76: lines 76-77
				if ($formatter->defineKey($_g31) === $formatter->defineKey($_g22)) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:77: characters 13-21
					continue;
				}
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:78: characters 11-38
				$changes->length = array_unshift($changes->arr, AlterTableOperation::DropKey($_g31));
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:79: characters 11-34
				$changes->arr[$changes->length] = AlterTableOperation::AddKey($_g22);
				++$changes->length;

			}

		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:81: characters 5-32
		return $changes->concat($post);
	}

	/**
	 * @param object $column
	 * 
	 * @return bool
	 */
	public function hasAutoIncrement ($column) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:29: characters 19-30
		$_g = $column->type;
		if (($_g->index === 1) && ($_g->params[2] === true)) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:30: characters 33-37
			return true;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:31: characters 16-21
			return false;
		}
	}

	/**
	 * @param Key $key
	 * 
	 * @return string
	 */
	public function keyName ($key) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:23: lines 23-26
		$__hx__switch = ($key->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:24: characters 25-32
			return "primary";
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:25: characters 19-23
			$name = $key->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:25: characters 46-50
			return $name;
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:25: characters 36-40
			$name1 = $key->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:25: characters 46-50
			return $name1;
		}
	}

	/**
	 * @param object $column
	 * 
	 * @return object
	 */
	public function withoutAutoIncrement ($column) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:35: characters 19-30
		$_g = $column->type;
		if (($_g->index === 1) && ($_g->params[2] === true)) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:36: characters 37-49
			$defaultValue = $_g->params[3];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:36: characters 17-21
			$bits = $_g->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:36: characters 23-29
			$signed = $_g->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:36: lines 36-40
			return new HxAnon([
				"name" => $column->name,
				"nullable" => $column->nullable,
				"type" => DataType::DInt($bits, $signed, false, $defaultValue),
			]);
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Schema.hx:41: characters 16-22
			return $column;
		}
	}
}

Boot::registerClass(Schema::class, 'tink.sql.Schema');
