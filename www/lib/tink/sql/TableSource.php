<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx
 */

namespace tink\sql;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\core\Noise;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\core\_Promise\Promise_Impl_;
use \php\_Boot\HxException;
use \tink\core\_Future\FutureObject;

class TableSource extends Selectable implements TableInfo {
	/**
	 * @var string
	 */
	public $name;

	/**
	 * @param Connection $cnx
	 * @param string $name
	 * @param string $alias
	 * @param mixed $fields
	 * 
	 * @return void
	 */
	public function __construct ($cnx, $name, $alias, $fields) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:30: characters 5-21
		$this->name = $name;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:31: characters 5-25
		$this->fields = $fields;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:33: lines 33-38
		parent::__construct($cnx, $fields, Target::TTable($name, $alias), function ($f)  use (&$fields) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:37: characters 27-70
			return $f($fields);
		});
	}

	/**
	 * @return \Array_hx
	 */
	public function columnNames () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:119: characters 12-55
		$_this = $this->getColumns();
		$f = function ($f1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:119: characters 41-54
			return $f1->name;
		};
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:119: characters 12-55
		$result = [];
		$collection = $_this->arr;
		foreach ($collection as $key => $value) {
			$result[] = $f($value);
		}

		return \Array_hx::wrap($result);
	}

	/**
	 * @param bool $ifNotExists
	 * 
	 * @return FutureObject
	 */
	public function create ($ifNotExists = false) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:44: characters 5-55
		if ($ifNotExists === null) {
			$ifNotExists = false;
		}
		return $this->cnx->execute(Query::CreateTable($this, $ifNotExists));
	}

	/**
	 * @param object $options
	 * 
	 * @return FutureObject
	 */
	public function delete ($options) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:100: lines 100-104
		return $this->cnx->execute(Query::Delete(new HxAnon([
			"from" => $this,
			"where" => ($this->toCondition)($options->where),
			"max" => $options->max,
		])));
	}

	/**
	 * @param bool $destructive
	 * 
	 * @return FutureObject
	 */
	public function diffSchema ($destructive = false) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:49: lines 49-59
		if ($destructive === null) {
			$destructive = false;
		}
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:50: characters 29-41
		$schema = $this->getColumns();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:50: characters 5-54
		$schema1 = new Schema($schema, $this->getKeys());
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:51: lines 51-58
		return Promise_Impl_::next(Promise_Impl_::and($this->cnx->execute(Query::ShowColumns($this)), $this->cnx->execute(Query::ShowIndex($this))), function ($res)  use (&$_gthis, &$schema1, &$value, &$destructive) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:53: characters 16-40
			$_this = new Schema($res->a, $res->b);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:54: characters 25-43
			$_this1 = $_gthis->cnx->getFormatter();
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:53: lines 53-57
			$_this2 = $_this->diff($schema1, $_this1);
			$f = function ($change)  use (&$destructive) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:56: characters 20-63
				if (!$destructive) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:56: characters 35-63
					return $change->index !== 3;
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:56: characters 20-63
					return true;
				}
			};
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:53: lines 53-57
			$result = [];
			$collection = $_this2->arr;
			foreach ($collection as $key => $value) {
				if ($f($value)) {
					$result[] = $value;
				}
			}

			return new SyncFuture(new LazyConst(Outcome::Success(\Array_hx::wrap($result))));
		});
	}

	/**
	 * @return FutureObject
	 */
	public function drop () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:47: characters 5-40
		return $this->cnx->execute(Query::DropTable($this));
	}

	/**
	 * @return \Array_hx
	 */
	public function getColumns () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:115: characters 5-10
		throw new HxException("not implemented");
	}

	/**
	 * @return \Array_hx
	 */
	public function getKeys () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:123: characters 5-10
		throw new HxException("not implemented");
	}

	/**
	 * @return string
	 */
	public function getName () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:111: characters 5-16
		return $this->name;
	}

	/**
	 * @param \Array_hx $rows
	 * @param object $options
	 * 
	 * @return FutureObject
	 */
	public function insertMany ($rows, $options = null) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:76: lines 76-81
		if ($rows->length === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:76: characters 34-46
			return Promise_Impl_::$NULL;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:77: lines 77-81
			return $this->cnx->execute(Query::Insert(new HxAnon([
				"table" => $this,
				"rows" => $rows,
				"ignore" => ($options === null ? null : $options->ignore),
			])));
		}
	}

	/**
	 * @param mixed $row
	 * @param object $options
	 * 
	 * @return FutureObject
	 */
	public function insertOne ($row, $options = null) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:84: characters 5-38
		return $this->insertMany(\Array_hx::wrap([$row]), $options);
	}

	/**
	 * @param \Closure $f
	 * @param object $options
	 * 
	 * @return FutureObject
	 */
	public function update ($f, $options) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:87: characters 19-33
		$_g = $f($this->fields);
		if ($_g->length === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:89: characters 9-40
			return new SyncFuture(new LazyConst(Outcome::Success(new HxAnon(["rowsAffected" => 0]))));
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:91: lines 91-96
			return $this->cnx->execute(Query::Update(new HxAnon([
				"table" => $this,
				"set" => $_g,
				"where" => ($this->toCondition)($options->where),
				"max" => $options->max,
			])));
		}
	}

	/**
	 * @param \Array_hx $changes
	 * 
	 * @return FutureObject
	 */
	public function updateSchema ($changes) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:61: lines 61-73
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:62: characters 5-29
		$pre = new \Array_hx();
		$post = new \Array_hx();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:63: lines 63-67
		$_g = 0;
		$_g1 = $changes->length;
		while ($_g < $_g1) {
			$i = $_g++;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:64: characters 14-24
			$_g2 = ($changes->arr[$i] ?? null);
			if ($_g2->index === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:65: characters 25-48
				$post = $changes->slice($i);
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:65: characters 50-55
				break;
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:66: characters 17-28
				$pre->arr[$pre->length] = $_g2;
				++$pre->length;
			}

		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:68: lines 68-72
		return Promise_Impl_::next($this->cnx->execute(Query::AlterTable($this, $pre)), function ($_)  use (&$post, &$_gthis) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:70: lines 70-71
			if ($post->length > 0) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:70: characters 30-65
				return $_gthis->cnx->execute(Query::AlterTable($_gthis, $post));
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Table.hx:71: characters 14-19
				return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
			}
		});
	}
}

Boot::registerClass(TableSource::class, 'tink.sql.TableSource');
