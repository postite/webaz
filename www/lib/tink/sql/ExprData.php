<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx
 */

namespace tink\sql;

use \php\Boot;
use \php\_Boot\HxEnum;

class ExprData extends HxEnum {
	/**
	 * @param BinOp $op
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function EBinOp ($op, $a, $b) {
		return new ExprData('EBinOp', 1, [$op, $a, $b]);
	}

	/**
	 * @param string $name
	 * @param \Array_hx $args
	 * 
	 * @return ExprData
	 */
	static public function ECall ($name, $args) {
		return new ExprData('ECall', 3, [$name, $args]);
	}

	/**
	 * @param string $table
	 * @param string $name
	 * 
	 * @return ExprData
	 */
	static public function EField ($table, $name) {
		return new ExprData('EField', 2, [$table, $name]);
	}

	/**
	 * @param Query $query
	 * 
	 * @return ExprData
	 */
	static public function EQuery ($query) {
		return new ExprData('EQuery', 5, [$query]);
	}

	/**
	 * @param UnOp $op
	 * @param ExprData $a
	 * @param bool $postfix
	 * 
	 * @return ExprData
	 */
	static public function EUnOp ($op, $a, $postfix) {
		return new ExprData('EUnOp', 0, [$op, $a, $postfix]);
	}

	/**
	 * @param mixed $value
	 * @param ValueType $type
	 * 
	 * @return ExprData
	 */
	static public function EValue ($value, $type) {
		return new ExprData('EValue', 4, [$value, $type]);
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			1 => 'EBinOp',
			3 => 'ECall',
			2 => 'EField',
			5 => 'EQuery',
			0 => 'EUnOp',
			4 => 'EValue',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'EBinOp' => 3,
			'ECall' => 2,
			'EField' => 2,
			'EQuery' => 1,
			'EUnOp' => 3,
			'EValue' => 2,
		];
	}
}

Boot::registerClass(ExprData::class, 'tink.sql.ExprData');
