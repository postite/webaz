<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx
 */

namespace tink\sql\format;

use \tink\sql\ExprData;
use \php\_Boot\HxAnon;
use \php\Boot;
use \tink\sql\IntSize;
use \tink\sql\DataType;
use \tink\sql\TableInfo;
use \haxe\Json;
use \php\_Boot\HxString;
use \tink\sql\Query;
use \tink\sql\AlterTableOperation;
use \tink\sql\schema\KeyStore;
use \tink\sql\TextSize;

class MySqlFormatter extends SqlFormatter {
	/**
	 * @param Sanitizer $sanitizer
	 * 
	 * @return void
	 */
	public function __construct ($sanitizer) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:9: lines 9-145
		parent::__construct($sanitizer);
	}

	/**
	 * @param TableInfo $table
	 * @param \Array_hx $changes
	 * 
	 * @return string
	 */
	public function alterTable ($table, $changes) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:96: characters 7-29
		$name = $table->getName();
		$parts = $this->sanitizer->ident($name);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:97: characters 7-30
		$f = Boot::getInstanceClosure($this, 'alteration');
		$result = [];
		$collection = $changes->arr;
		foreach ($collection as $key => $value) {
			$result[] = $f($value);
		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:94: lines 94-98
		$parts1 = \Array_hx::wrap([
			"ALTER TABLE",
			$parts,
			\Array_hx::wrap($result)->join($this->separate),
		]);
		$f1 = function ($part) {
			return $part !== "";
		};
		$result1 = [];
		$collection1 = $parts1->arr;
		foreach ($collection1 as $key1 => $value1) {
			if ($f1($value1)) {
				$result1[] = $value1;
			}
		}

		return \Array_hx::wrap($result1)->join(" ");
	}

	/**
	 * @param AlterTableOperation $change
	 * 
	 * @return string
	 */
	public function alteration ($change) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:101: lines 101-115
		$parts = null;
		$__hx__switch = ($change->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:102: characters 22-25
			$col = $change->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:101: lines 101-115
			$parts = \Array_hx::wrap([
				"ADD COLUMN",
				$this->defineColumn($col),
			]);
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:113: characters 19-22
			$key = $change->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:101: lines 101-115
			$parts = \Array_hx::wrap([
				"ADD",
				$this->defineKey($key),
			]);
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:104: characters 24-26
			$to = $change->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:101: lines 101-115
			$parts = \Array_hx::wrap([
				"MODIFY COLUMN",
				$this->defineColumn($to),
			]);
		} else if ($__hx__switch === 3) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:106: characters 23-26
			$col1 = $change->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:101: lines 101-115
			$parts = \Array_hx::wrap([
				"DROP COLUMN",
				$this->sanitizer->ident($col1->name),
			]);
		} else if ($__hx__switch === 4) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:108: characters 20-23
			$key1 = $change->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:109: lines 109-112
			$parts1 = null;
			$__hx__switch = ($key1->index);
			if ($__hx__switch === 0) {
				$parts1 = "PRIMARY KEY";
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:110: characters 23-27
				$name = $key1->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:109: lines 109-112
				$parts1 = "INDEX " . ($this->sanitizer->ident($name)??'null');
			} else if ($__hx__switch === 2) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:110: characters 40-44
				$name1 = $key1->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:109: lines 109-112
				$parts1 = "INDEX " . ($this->sanitizer->ident($name1)??'null');
			}
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:101: lines 101-115
			$parts = \Array_hx::wrap([
				"DROP",
				$parts1,
			]);
		}
		$f = function ($part) {
			return $part !== "";
		};
		$result = [];
		$collection = $parts->arr;
		foreach ($collection as $key2 => $value) {
			if ($f($value)) {
				$result[] = $value;
			}
		}

		return \Array_hx::wrap($result)->join(" ");
	}

	/**
	 * @param ExprData $e
	 * 
	 * @return string
	 */
	public function expr ($e) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:118: lines 118-122
		if (($e->index === 4) && ($e->params[1]->index === 7)) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:119: characters 19-23
			$geom = $e->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:120: characters 11-62
			return "ST_GeomFromGeoJSON('" . (Json::phpJsonEncode($geom, null, null)??'null') . "')";
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:121: characters 16-29
			return parent::expr($e);
		}
	}

	/**
	 * @param Query $query
	 * 
	 * @return string
	 */
	public function format ($query) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:12: lines 12-17
		$__hx__switch = ($query->index);
		if ($__hx__switch === 7) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:15: characters 30-37
			$changes = $query->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:15: characters 23-28
			$table = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:15: characters 40-66
			return $this->alterTable($table, $changes);
		} else if ($__hx__switch === 8) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:13: characters 24-28
			$from = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:13: characters 31-48
			return $this->showColumns($from);
		} else if ($__hx__switch === 9) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:14: characters 22-26
			$from1 = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:14: characters 29-44
			return $this->showIndex($from1);
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:16: characters 16-35
			return parent::format($query);
		}
	}

	/**
	 * @param object $res
	 * 
	 * @return object
	 */
	public function parseColumn ($res) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:126: characters 13-22
		$res1 = $res->Field;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:127: characters 17-34
		$tmp = $res->Null === "YES";
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:125: lines 125-129
		return new HxAnon([
			"name" => $res1,
			"nullable" => $tmp,
			"type" => $this->parseType($res->Type, HxString::indexOf($res->Extra, "auto_increment") > -1, $res->Default),
		]);
	}

	/**
	 * @param \Array_hx $keys
	 * 
	 * @return \Array_hx
	 */
	public function parseKeys ($keys) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:132: characters 5-32
		$store = new KeyStore();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:133: lines 133-141
		$_g = 0;
		while ($_g < $keys->length) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:133: characters 10-13
			$key = ($keys->arr[$_g] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:133: lines 133-141
			++$_g;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:135: characters 25-40
			if (mb_strtolower($key->Key_name) === "primary") {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:136: characters 11-44
				$store->addPrimary($key->Column_name);
			} else if ($key->Non_unique === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:138: characters 11-57
				$store->addUnique($key->Key_name, $key->Column_name);
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:140: characters 11-56
				$store->addIndex($key->Key_name, $key->Column_name);
			}
		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:142: characters 5-23
		return $store->get();
	}

	/**
	 * @param TableInfo $from
	 * 
	 * @return string
	 */
	public function showColumns ($from) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:88: characters 35-56
		$name = $from->getName();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:88: characters 5-56
		return "SHOW COLUMNS FROM " . ($this->sanitizer->ident($name)??'null');
	}

	/**
	 * @param TableInfo $from
	 * 
	 * @return string
	 */
	public function showIndex ($from) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:91: characters 33-54
		$name = $from->getName();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:91: characters 5-54
		return "SHOW INDEX FROM " . ($this->sanitizer->ident($name)??'null');
	}

	/**
	 * @param object $type
	 * 
	 * @return DataType
	 */
	public function toDataType ($type) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:40: lines 40-84
		$__hx__switch = ($type->name);
		if ($__hx__switch === "BLOB") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:40: characters 19-23
			if ($type->values->length === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:64: characters 36-39
				$max = ($type->values->arr[0] ?? null);
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:65: characters 9-33
				return DataType::DBlob(\Std::parseInt($max));
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:83: characters 9-47
				return DataType::DUnknown($type->name, $type->defaultValue);
			}
		} else if ($__hx__switch === "DATETIME") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:67: characters 9-49
			return DataType::DDateTime(($type->defaultValue === null ? null : \Date::fromString($type->defaultValue)));
		} else if ($__hx__switch === "DOUBLE") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:51: characters 9-46
			return DataType::DDouble(($type->defaultValue === null ? null : \Std::parseFloat($type->defaultValue)));
		} else if ($__hx__switch === "FLOAT") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:49: characters 9-46
			return DataType::DDouble(($type->defaultValue === null ? null : \Std::parseFloat($type->defaultValue)));
		} else if ($__hx__switch === "INT") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:59: characters 23-59
			$tmp = $type->flags->indexOf("UNSIGNED") === -1;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:59: characters 61-79
			$type1 = $type->autoIncrement;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:59: characters 9-108
			return DataType::DInt(IntSize::Default(), $tmp, $type1, ($type->defaultValue === null ? null : \Std::parseInt($type->defaultValue)));
		} else if ($__hx__switch === "LONGTEXT") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:75: characters 9-39
			return DataType::DText(TextSize::Long(), $type->defaultValue);
		} else if ($__hx__switch === "MEDIUMINT") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:57: characters 22-58
			$tmp1 = $type->flags->indexOf("UNSIGNED") === -1;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:57: characters 60-78
			$type2 = $type->autoIncrement;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:57: characters 9-107
			return DataType::DInt(IntSize::Medium(), $tmp1, $type2, ($type->defaultValue === null ? null : \Std::parseInt($type->defaultValue)));
		} else if ($__hx__switch === "MEDIUMTEXT") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:73: characters 9-41
			return DataType::DText(TextSize::Medium(), $type->defaultValue);
		} else if ($__hx__switch === "MULTIPOLYGON") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:81: characters 9-22
			return DataType::DMultiPolygon();
		} else if ($__hx__switch === "POINT") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:77: characters 9-15
			return DataType::DPoint();
		} else if ($__hx__switch === "POLYGON") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:79: characters 9-17
			return DataType::DPolygon();
		} else if ($__hx__switch === "SMALLINT") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:55: characters 21-57
			$tmp2 = $type->flags->indexOf("UNSIGNED") === -1;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:55: characters 59-77
			$type3 = $type->autoIncrement;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:55: characters 9-106
			return DataType::DInt(IntSize::Small(), $tmp2, $type3, ($type->defaultValue === null ? null : \Std::parseInt($type->defaultValue)));
		} else if ($__hx__switch === "TEXT") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:71: characters 9-42
			return DataType::DText(TextSize::Default(), $type->defaultValue);
		} else if ($__hx__switch === "TINYINT") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:40: characters 19-23
			if (($type->values->length === 1) && (($type->values->arr[0] ?? null) === "1")) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:42: characters 9-66
				return DataType::DBool(($type->defaultValue === null ? null : $type->defaultValue === "1"));
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:53: characters 20-56
				$tmp3 = $type->flags->indexOf("UNSIGNED") === -1;
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:53: characters 58-76
				$type4 = $type->autoIncrement;
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:53: characters 9-105
				return DataType::DInt(IntSize::Tiny(), $tmp3, $type4, ($type->defaultValue === null ? null : \Std::parseInt($type->defaultValue)));
			}
		} else if ($__hx__switch === "TINYTEXT") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:69: characters 9-39
			return DataType::DText(TextSize::Tiny(), $type->defaultValue);
		} else if ($__hx__switch === "VARCHAR") {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:40: characters 19-23
			if ($type->values->length === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:62: characters 39-42
				$max1 = ($type->values->arr[0] ?? null);
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:63: characters 17-34
				$tmp4 = \Std::parseInt($max1);
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:63: characters 9-54
				return DataType::DString($tmp4, $type->defaultValue);
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:83: characters 9-47
				return DataType::DUnknown($type->name, $type->defaultValue);
			}
		} else {
			return DataType::DUnknown($type->name, $type->defaultValue);
		}
	}

	/**
	 * @param DataType $type
	 * 
	 * @return string
	 */
	public function type ($type) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:20: lines 20-35
		$__hx__switch = ($type->index);
		if ($__hx__switch === 4) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:21: characters 24-25
			$d = $type->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:21: characters 18-22
			$size = $type->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:22: lines 22-27
			$tmp = null;
			$__hx__switch = ($size->index);
			if ($__hx__switch === 0) {
				$tmp = "TINYTEXT";
			} else if ($__hx__switch === 1) {
				$tmp = "TEXT";
			} else if ($__hx__switch === 2) {
				$tmp = "MEDIUMTEXT";
			} else if ($__hx__switch === 3) {
				$tmp = "LONGTEXT";
			}
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:27: characters 14-27
			$defaultValue = $d;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:22: lines 22-27
			return ($tmp??'null') . ((($defaultValue === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue)??'null')))??'null');
		} else if ($__hx__switch === 9) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:29: characters 10-15
			return "POINT";
		} else if ($__hx__switch === 10) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:31: characters 10-17
			return "POLYGON";
		} else if ($__hx__switch === 11) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:33: characters 10-22
			return "MULTIPOLYGON";
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/MySqlFormatter.hx:34: characters 16-32
			return parent::type($type);
		}
	}
}

Boot::registerClass(MySqlFormatter::class, 'tink.sql.format.MySqlFormatter');
