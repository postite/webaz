<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx
 */

namespace tink\sql\format;

use \php\_Boot\HxDynamicStr;
use \tink\sql\ExprData;
use \tink\sql\_Expr\Field_Impl_;
use \php\_Boot\HxAnon;
use \tink\sql\UnOp;
use \tink\sql\Key;
use \php\Boot;
use \tink\sql\Target;
use \tink\sql\_Limit\Limit_Impl_;
use \tink\sql\DataType;
use \tink\sql\TableInfo;
use \haxe\Json;
use \php\_Boot\HxString;
use \tink\sql\Query;
use \tink\sql\BinOp;
use \php\_Boot\HxException;

class SqlFormatter implements Formatter {
	/**
	 * @var Sanitizer
	 */
	public $sanitizer;
	/**
	 * @var string
	 */
	public $separate;

	/**
	 * @param Sanitizer $sanitizer
	 * 
	 * @return void
	 */
	public function __construct ($sanitizer) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:15: characters 19-21
		$this->separate = ", ";
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:18: characters 5-31
		$this->sanitizer = $sanitizer;
	}

	/**
	 * @param bool $condition
	 * @param string $addition
	 * 
	 * @return string
	 */
	public function add ($condition, $addition) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:51: characters 12-43
		if ($condition) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:51: characters 27-35
			return $addition;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:51: characters 41-43
			return "";
		}
	}

	/**
	 * @param mixed $defaultValue
	 * 
	 * @return string
	 */
	public function addDefault ($defaultValue) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:57: lines 57-60
		if ($defaultValue === null) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:58: characters 18-20
			return "";
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:59: characters 15-48
			return " DEFAULT " . ($this->sanitizer->value($defaultValue)??'null');
		}
	}

	/**
	 * @param bool $increment
	 * 
	 * @return string
	 */
	public function autoIncrement ($increment) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:66: characters 12-44
		if ($increment) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:66: characters 28-42
			return "AUTO_INCREMENT";
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:66: characters 12-44
			return "";
		}
	}

	/**
	 * @param BinOp $o
	 * 
	 * @return string
	 */
	public function binOp ($o) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:280: lines 280-292
		$__hx__switch = ($o->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:281: characters 18-19
			return "+";
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:282: characters 19-20
			return "-";
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:283: characters 19-20
			return "*";
		} else if ($__hx__switch === 3) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:285: characters 18-21
			return "MOD";
		} else if ($__hx__switch === 4) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:284: characters 18-19
			return "/";
		} else if ($__hx__switch === 5) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:289: characters 22-23
			return ">";
		} else if ($__hx__switch === 6) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:288: characters 21-22
			return "=";
		} else if ($__hx__switch === 7) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:287: characters 18-22
			return "AND ";
		} else if ($__hx__switch === 8) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:286: characters 17-19
			return "OR";
		} else if ($__hx__switch === 9) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:290: characters 19-23
			return "LIKE";
		} else if ($__hx__switch === 10) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:291: characters 17-19
			return "IN";
		}
	}

	/**
	 * @param TableInfo $table
	 * @param bool $ifNotExists
	 * 
	 * @return string
	 */
	public function createTable ($table, $ifNotExists) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:125: characters 7-29
		$name = $table->getName();
		$parts = $this->sanitizer->ident($name);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:122: lines 122-132
		$parts1 = \Array_hx::wrap([
			"CREATE TABLE",
			($ifNotExists ? "IF NOT EXISTS" : ""),
			$parts,
			"(" . (\Lambda::concat(\Lambda::map($table->getColumns(), Boot::getInstanceClosure($this, 'defineColumn')), \Lambda::map($table->getKeys(), Boot::getInstanceClosure($this, 'defineKey')))->join($this->separate)??'null') . ")",
		]);
		$f = function ($part) {
			return $part !== "";
		};
		$result = [];
		$collection = $parts1->arr;
		foreach ($collection as $key => $value) {
			if ($f($value)) {
				$result[] = $value;
			}
		}

		return \Array_hx::wrap($result)->join(" ");
	}

	/**
	 * @param object $column
	 * 
	 * @return string
	 */
	public function defineColumn ($column) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:99: characters 7-25
		$parts = $this->sanitizer->ident($column->name);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:100: characters 7-24
		$parts1 = $this->type($column->type);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:101: characters 7-32
		$parts2 = ($column->nullable ? "NULL" : "NOT NULL");
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:102: characters 21-32
		$_g = $column->type;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:98: lines 98-103
		$f = function ($part) {
			return $part !== "";
		};
		$result = [];
		$collection = (\Array_hx::wrap([
			$parts,
			$parts1,
			$parts2,
			(($_g->index === 1) && ($_g->params[2] === true) ? "AUTO_INCREMENT" : ""),
		]))->arr;
		foreach ($collection as $key => $value) {
			if ($f($value)) {
				$result[] = $value;
			}
		}

		return \Array_hx::wrap($result)->join(" ");
	}

	/**
	 * @param Key $key
	 * 
	 * @return string
	 */
	public function defineKey ($key) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:113: lines 113-117
		$parts = null;
		$__hx__switch = ($key->index);
		if ($__hx__switch === 0) {
			$parts = "PRIMARY KEY";
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:115: characters 19-23
			$name = $key->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:113: lines 113-117
			$parts = "UNIQUE KEY " . ($this->sanitizer->ident($name)??'null');
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:116: characters 18-22
			$name1 = $key->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:113: lines 113-117
			$parts = "INDEX " . ($this->sanitizer->ident($name1)??'null');
		}
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:118: characters 7-32
		$_this = $this->keyFields($key);
		$f = Boot::getInstanceClosure($this, 'ident');
		$result = [];
		$collection = $_this->arr;
		foreach ($collection as $key1 => $value) {
			$result[] = $f($value);
		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:113: lines 113-119
		$parts1 = \Array_hx::wrap([
			$parts,
			"(" . (\Array_hx::wrap($result)->join($this->separate)??'null') . ")",
		]);
		$f1 = function ($part) {
			return $part !== "";
		};
		$result1 = [];
		$collection1 = $parts1->arr;
		foreach ($collection1 as $key2 => $value1) {
			if ($f1($value1)) {
				$result1[] = $value1;
			}
		}

		return \Array_hx::wrap($result1)->join(" ");
	}

	/**
	 * @param object $delete
	 * 
	 * @return string
	 */
	public function delete ($delete) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:274: characters 7-35
		$name = $delete->from->getName();
		$parts = $this->sanitizer->ident($name);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:275: characters 7-26
		$parts1 = $this->where($delete->where);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:272: lines 272-277
		$parts2 = \Array_hx::wrap([
			"DELETE FROM",
			$parts,
			$parts1,
			$this->limit(Limit_Impl_::ofInt($delete->max)),
		]);
		$f = function ($part) {
			return $part !== "";
		};
		$result = [];
		$collection = $parts2->arr;
		foreach ($collection as $key => $value) {
			if ($f($value)) {
				$result[] = $value;
			}
		}

		return \Array_hx::wrap($result)->join(" ");
	}

	/**
	 * @param TableInfo $table
	 * 
	 * @return string
	 */
	public function dropTable ($table) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:135: characters 28-50
		$name = $table->getName();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:135: characters 5-50
		return "DROP TABLE " . ($this->sanitizer->ident($name)??'null');
	}

	/**
	 * @param ExprData $e
	 * 
	 * @return bool
	 */
	public function emptyArray ($e) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:302: characters 12-19
		if (($e->index === 4) && ((HxDynamicStr::wrap($e->params[0])->length === 0) && ($e->params[1]->index === 4))) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * @param ExprData $e
	 * 
	 * @return string
	 */
	public function expr ($e) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:308: lines 308-349
		$__hx__switch = ($e->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:308: characters 19-20
			$__hx__switch = ($e->params[2]);
			if ($__hx__switch === false) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:309: characters 18-20
				$op = $e->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:309: characters 22-23
				$a = $e->params[1];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:310: characters 9-33
				return ($this->unOp($op)??'null') . " " . ($this->expr($a)??'null');
			} else if ($__hx__switch === true) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:311: characters 18-20
				$op1 = $e->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:311: characters 22-23
				$a1 = $e->params[1];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:312: characters 9-33
				return ($this->expr($a1)??'null') . " " . ($this->unOp($op1)??'null');
			}
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:308: characters 19-20
			if ($e->params[0]->index === 10) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:313: characters 26-27
				$b = $e->params[2];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:313: characters 33-46
				$e1 = $b;
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:313: lines 313-316
				if (($e1->index === 4) && ((HxDynamicStr::wrap($e1->params[0])->length === 0) && ($e1->params[1]->index === 4))) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:314: characters 9-21
					return $this->sanitizer->value(false);
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:315: characters 26-27
					$b1 = $e->params[2];
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:315: characters 23-24
					$a2 = $e->params[1];
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:315: characters 19-21
					$op2 = $e->params[0];
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:316: characters 10-46
					return "(" . ($this->expr($a2)??'null') . " " . ($this->binOp($op2)??'null') . " " . ($this->expr($b1)??'null') . ")";
				}
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:315: characters 26-27
				$b2 = $e->params[2];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:315: characters 23-24
				$a3 = $e->params[1];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:315: characters 19-21
				$op3 = $e->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:316: characters 10-46
				return "(" . ($this->expr($a3)??'null') . " " . ($this->binOp($op3)??'null') . " " . ($this->expr($b2)??'null') . ")";
			}
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:319: characters 26-30
			$name = $e->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:319: characters 19-24
			$table = $e->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:320: characters 9-64
			return ((($table === null ? "" : ($this->sanitizer->ident($table)??'null') . "."))??'null') . ($this->sanitizer->ident($name)??'null');
		} else if ($__hx__switch === 3) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:317: characters 24-28
			$args = $e->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:317: characters 18-22
			$name1 = $e->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:318: characters 10-16
			$tmp = "" . ($name1??'null') . "(";
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:318: characters 18-46
			$_g = new \Array_hx();
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:318: characters 19-45
			$_g1 = 0;
			while ($_g1 < $args->length) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:318: characters 23-26
				$arg = ($args->arr[$_g1] ?? null);
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:318: characters 19-45
				++$_g1;
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:318: characters 36-45
				$x = $this->expr($arg);
				$_g->arr[$_g->length] = $x;
				++$_g->length;

			}

			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:318: characters 10-58
			return ($tmp??'null') . ($_g->join(",")??'null') . ")";
		} else if ($__hx__switch === 4) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:308: characters 19-20
			$__hx__switch = ($e->params[1]->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:323: characters 19-20
				$v = $e->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:324: characters 9-17
				return $this->sanitizer->value($v);
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:321: characters 19-20
				$v1 = $e->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:322: characters 9-17
				return $this->sanitizer->value($v1);
			} else if ($__hx__switch === 2) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:327: characters 19-20
				$v2 = $e->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:328: characters 9-17
				return $this->sanitizer->value($v2);
			} else if ($__hx__switch === 3) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:325: characters 19-20
				$v3 = $e->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:326: characters 9-17
				return $this->sanitizer->value($v3);
			} else if ($__hx__switch === 4) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:308: characters 19-20
				$__hx__switch = ($e->params[1]->params[0]->index);
				if ($__hx__switch === 0) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:339: characters 19-20
					$v4 = $e->params[0];
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:340: characters 9-18
					$f = Boot::getInstanceClosure($this, 'value');
					$result = [];
					$collection = $v4->arr;
					foreach ($collection as $key => $value) {
						$result[] = $f($value);
					}

					return "(" . (\Array_hx::wrap($result)->join($this->separate)??'null') . ")";
				} else if ($__hx__switch === 1) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:333: characters 19-20
					$v5 = $e->params[0];
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:334: characters 9-18
					$f1 = Boot::getInstanceClosure($this, 'value');
					$result1 = [];
					$collection1 = $v5->arr;
					foreach ($collection1 as $key1 => $value1) {
						$result1[] = $f1($value1);
					}

					return "(" . (\Array_hx::wrap($result1)->join($this->separate)??'null') . ")";
				} else if ($__hx__switch === 2) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:337: characters 19-20
					$v6 = $e->params[0];
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:338: characters 9-18
					$f2 = Boot::getInstanceClosure($this, 'value');
					$result2 = [];
					$collection2 = $v6->arr;
					foreach ($collection2 as $key2 => $value2) {
						$result2[] = $f2($value2);
					}

					return "(" . (\Array_hx::wrap($result2)->join($this->separate)??'null') . ")";
				} else if ($__hx__switch === 3) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:335: characters 19-20
					$v7 = $e->params[0];
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:336: characters 9-18
					$f3 = Boot::getInstanceClosure($this, 'value');
					$result3 = [];
					$collection3 = $v7->arr;
					foreach ($collection3 as $key3 => $value3) {
						$result3[] = $f3($value3);
					}

					return "(" . (\Array_hx::wrap($result3)->join($this->separate)??'null') . ")";
				} else if ($__hx__switch === 6) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:341: characters 19-20
					$v8 = $e->params[0];
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:342: characters 9-18
					$f4 = Boot::getInstanceClosure($this, 'value');
					$result4 = [];
					$collection4 = $v8->arr;
					foreach ($collection4 as $key4 => $value4) {
						$result4[] = $f4($value4);
					}

					return "(" . (\Array_hx::wrap($result4)->join($this->separate)??'null') . ")";
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:344: characters 9-14
					throw new HxException("Only arrays of primitive types are supported");
				}
			} else if ($__hx__switch === 5) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:331: characters 19-24
				$bytes = $e->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:332: characters 9-21
				return $this->sanitizer->value($bytes);
			} else if ($__hx__switch === 6) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:329: characters 19-20
				$v9 = $e->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:330: characters 9-17
				return $this->sanitizer->value($v9);
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:348: characters 9-14
				throw new HxException("Expression not supported in current formatter: " . (\Std::string($e)??'null'));
			}
		} else if ($__hx__switch === 5) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:345: characters 19-24
			$query = $e->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:346: characters 9-35
			return "(" . ($this->format($query)??'null') . ")";
		}
	}

	/**
	 * @param string $name
	 * @param ExprData $value
	 * 
	 * @return string
	 */
	public function field ($name, $value) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:170: characters 7-18
		$parts = $this->expr($value);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:169: lines 169-173
		$parts1 = \Array_hx::wrap([
			$parts,
			"AS",
			$this->sanitizer->ident($name),
		]);
		$f = function ($part) {
			return $part !== "";
		};
		$result = [];
		$collection = $parts1->arr;
		foreach ($collection as $key => $value1) {
			if ($f($value1)) {
				$result[] = $value1;
			}
		}

		return \Array_hx::wrap($result)->join(" ");
	}

	/**
	 * @param Query $query
	 * 
	 * @return string
	 */
	public function format ($query) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:22: lines 22-31
		$__hx__switch = ($query->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:27: characters 18-20
			$op = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:27: characters 23-32
			return $this->union($op);
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:26: characters 19-21
			$op1 = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:26: characters 24-34
			return $this->select($op1);
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:25: characters 19-21
			$op2 = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:25: characters 24-34
			return $this->insert($op2);
		} else if ($__hx__switch === 3) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:28: characters 19-21
			$op3 = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:28: characters 24-34
			return $this->update($op3);
		} else if ($__hx__switch === 4) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:29: characters 19-21
			$op4 = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:29: characters 24-34
			return $this->delete($op4);
		} else if ($__hx__switch === 5) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:23: characters 31-42
			$ifNotExists = $query->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:23: characters 24-29
			$table = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:23: characters 45-76
			return $this->createTable($table, $ifNotExists);
		} else if ($__hx__switch === 6) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:24: characters 22-27
			$table1 = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:24: characters 30-46
			return $this->dropTable($table1);
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:30: characters 16-21
			throw new HxException("Query not supported in currrent formatter: " . (\Std::string($query)??'null'));
		}
	}

	/**
	 * @param \Array_hx $grouped
	 * 
	 * @return string
	 */
	public function groupBy ($grouped) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:204: lines 204-208
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:205: lines 205-208
		if ($grouped !== null) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:207: characters 7-60
			$f = function ($field)  use (&$_gthis) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:207: characters 36-59
				return $_gthis->expr($field);
			};
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:207: characters 7-60
			$result = [];
			$collection = $grouped->arr;
			foreach ($collection as $key => $value) {
				$result[] = $f($value);
			}

			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:206: lines 206-207
			return "GROUP BY " . (\Array_hx::wrap($result)->join($this->separate)??'null');
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:208: characters 10-12
			return "";
		}
	}

	/**
	 * @param ExprData $condition
	 * 
	 * @return string
	 */
	public function having ($condition) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:233: lines 233-235
		if ($condition !== null) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:234: characters 7-34
			return "HAVING " . ($this->expr($condition)??'null');
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:235: characters 10-12
			return "";
		}
	}

	/**
	 * @param string $name
	 * 
	 * @return string
	 */
	public function ident ($name) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:42: characters 5-33
		return $this->sanitizer->ident($name);
	}

	/**
	 * @param object $insert
	 * 
	 * @return string
	 */
	public function insert ($insert) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:154: characters 7-35
		$parts = ($insert->ignore ? "IGNORE" : "");
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:156: characters 7-36
		$name = $insert->table->getName();
		$parts1 = $this->sanitizer->ident($name);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:157: lines 157-161
		$parts2 = "(" . (\Lambda::map($insert->table->columnNames(), Boot::getInstanceClosure($this, 'ident'))->join($this->separate)??'null') . ")";
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:163: lines 163-164
		$_this = $insert->rows;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:164: characters 14-28
		$f = Boot::getInstanceClosure($this, 'insertRow');
		$columns = $insert->table->getColumns();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:163: lines 163-164
		$f1 = function ($row)  use (&$f, &$columns) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:164: characters 14-28
			return $f($columns, $row);
		};
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:163: lines 163-164
		$result = [];
		$collection = $_this->arr;
		foreach ($collection as $key => $value) {
			$result[] = $f1($value);
		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:152: lines 152-166
		$parts3 = \Array_hx::wrap([
			"INSERT",
			$parts,
			"INTO",
			$parts1,
			$parts2,
			"VALUES",
			\Array_hx::wrap($result)->join($this->separate),
		]);
		$f2 = function ($part) {
			return $part !== "";
		};
		$result1 = [];
		$collection1 = $parts3->arr;
		foreach ($collection1 as $key1 => $value1) {
			if ($f2($value1)) {
				$result1[] = $value1;
			}
		}

		return \Array_hx::wrap($result1)->join(" ");
	}

	/**
	 * @param object $columns
	 * @param mixed $row
	 * 
	 * @return string
	 */
	public function insertRow ($columns, $row) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:137: lines 137-149
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:138: lines 138-149
		return "(" . (\Lambda::map($columns, function ($column)  use (&$row, &$_gthis) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:140: characters 23-39
			$_g = \Reflect::field($row, $column->name);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:141: lines 141-146
			if ($_g === null) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:141: characters 22-33
				return $_gthis->sanitizer->value(null);
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:142: characters 26-37
				$__hx__switch = ($column->type->index);
				if ($__hx__switch === 9 || $__hx__switch === 10 || $__hx__switch === 11) {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:144: characters 17-65
					return "ST_GeomFromGeoJSON('" . (Json::phpJsonEncode($_g, null, null)??'null') . "')";
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:145: characters 22-30
					return $_gthis->sanitizer->value($_g);
				}
			}
		})->join($this->separate)??'null') . ")";
	}

	/**
	 * @param Query $query
	 * 
	 * @return bool
	 */
	public function isNested ($query) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:34: lines 34-39
		$__hx__switch = ($query->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:37: characters 18-20
			$op = $query->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:37: characters 23-40
			return $this->isNested($op->left);
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:34: characters 19-24
			if (($query->params[0]->from->index === 1) && ($query->params[0]->selection === null)) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:35: characters 64-68
				return true;
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:36: characters 23-28
				return false;
			}
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:38: characters 16-21
			return false;
		}
	}

	/**
	 * @param \Array_hx $parts
	 * 
	 * @return string
	 */
	public function join ($parts) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:54: characters 12-59
		$f = function ($part) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:54: characters 41-58
			return $part !== "";
		};
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:54: characters 12-59
		$result = [];
		$collection = $parts->arr;
		foreach ($collection as $key => $value) {
			if ($f($value)) {
				$result[] = $value;
			}
		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:54: characters 5-69
		return \Array_hx::wrap($result)->join(" ");
	}

	/**
	 * @param Key $key
	 * 
	 * @return \Array_hx
	 */
	public function keyFields ($key) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:106: lines 106-110
		$__hx__switch = ($key->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:107: characters 20-26
			$fields = $key->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:109: characters 29-35
			return $fields;
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:108: characters 21-27
			$fields1 = $key->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:109: characters 29-35
			return $fields1;
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:109: characters 20-26
			$fields2 = $key->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:109: characters 29-35
			return $fields2;
		}
	}

	/**
	 * @param object $limit
	 * 
	 * @return string
	 */
	public function limit ($limit) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:219: lines 219-225
		if (($limit !== null) && ($limit->limit !== null)) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:221: characters 7-25
			$parts = $this->sanitizer->value($limit->limit);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:222: lines 222-224
			$parts1 = ($limit->offset !== null ? "OFFSET " . ($this->sanitizer->value($limit->offset)??'null') : "");
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:219: lines 219-225
			$f = function ($part) {
				return $part !== "";
			};
			$result = [];
			$collection = (\Array_hx::wrap([
				"LIMIT",
				$parts,
				$parts1,
			]))->arr;
			foreach ($collection as $key => $value) {
				if ($f($value)) {
					$result[] = $value;
				}
			}

			return \Array_hx::wrap($result)->join(" ");
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:225: characters 13-15
			return "";
		}
	}

	/**
	 * @param bool $isNullable
	 * 
	 * @return string
	 */
	public function nullable ($isNullable) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:63: characters 12-50
		if ($isNullable) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:63: characters 29-33
			return "NULL";
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:63: characters 41-49
			return "NOT NULL";
		}
	}

	/**
	 * @param \Array_hx $orderBy
	 * 
	 * @return string
	 */
	public function orderBy ($orderBy) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:210: lines 210-216
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:211: lines 211-216
		if ($orderBy !== null) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:213: lines 213-215
			$f = function ($by)  use (&$_gthis, &$value) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:214: characters 22-36
				$parts = $_gthis->expr($by->field);
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:214: characters 16-72
				$parts1 = \Array_hx::wrap([
					$parts,
					mb_strtoupper(\Type::enumConstructor($by->order)),
				]);
				$f1 = function ($part) {
					return $part !== "";
				};
				$result = [];
				$collection = $parts1->arr;
				foreach ($collection as $key => $value) {
					if ($f1($value)) {
						$result[] = $value;
					}
				}

				return \Array_hx::wrap($result)->join(" ");
			};
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:213: lines 213-215
			$result1 = [];
			$collection1 = $orderBy->arr;
			foreach ($collection1 as $key1 => $value1) {
				$result1[] = $f($value1);
			}

			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:212: lines 212-215
			return "ORDER BY " . (\Array_hx::wrap($result1)->join($this->separate)??'null');
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:216: characters 10-12
			return "";
		}
	}

	/**
	 * @param string $statement
	 * 
	 * @return string
	 */
	public function parenthesis ($statement) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:48: characters 5-26
		return "(" . ($statement??'null') . ")";
	}

	/**
	 * @param string $type
	 * @param bool $autoIncrement
	 * @param string $defaultValue
	 * 
	 * @return DataType
	 */
	public function parseType ($type, $autoIncrement, $defaultValue) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:354: lines 354-367
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:355: characters 5-47
		$flags = HxString::split(mb_strtoupper($type), " ");
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:362: characters 19-32
		if ($flags->length > 0) {
			$flags->length--;
		}
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:362: characters 19-43
		$_g = HxString::split(array_shift($flags->arr), "(");
		$__hx__switch = ($_g->length);
		if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:363: characters 13-17
			$name = ($_g->arr[0] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:363: characters 20-37
			return $_gthis->toDataType(new HxAnon([
				"name" => $name,
				"values" => new \Array_hx(),
				"flags" => $flags,
				"autoIncrement" => $autoIncrement,
				"defaultValue" => $defaultValue,
			]));
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:364: characters 19-25
			$values = ($_g->arr[1] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:364: characters 13-17
			$name1 = ($_g->arr[0] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:364: characters 28-89
			return $_gthis->toDataType(new HxAnon([
				"name" => $name1,
				"values" => HxString::split(mb_substr($values, 0, mb_strlen($values) - 1), ","),
				"flags" => $flags,
				"autoIncrement" => $autoIncrement,
				"defaultValue" => $defaultValue,
			]));
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:365: characters 16-21
			throw new HxException("Could not parse sql type: " . ($type??'null'));
		}
	}

	/**
	 * @param object $select
	 * 
	 * @return string
	 */
	public function select ($select) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:240: characters 7-34
		$parts = $this->selection($select->selection);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:242: characters 7-26
		$parts1 = $this->target($select->from);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:243: characters 7-26
		$parts2 = $this->where($select->where);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:244: characters 7-30
		$parts3 = $this->groupBy($select->groupBy);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:245: characters 7-28
		$parts4 = $this->having($select->having);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:246: characters 7-30
		$parts5 = $this->orderBy($select->orderBy);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:238: lines 238-248
		$parts6 = \Array_hx::wrap([
			"SELECT",
			$parts,
			"FROM",
			$parts1,
			$parts2,
			$parts3,
			$parts4,
			$parts5,
			$this->limit($select->limit),
		]);
		$f = function ($part) {
			return $part !== "";
		};
		$result = [];
		$collection = $parts6->arr;
		foreach ($collection as $key => $value) {
			if ($f($value)) {
				$result[] = $value;
			}
		}

		return \Array_hx::wrap($result)->join(" ");
	}

	/**
	 * @param mixed $selection
	 * 
	 * @return string
	 */
	public function selection ($selection) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:175: lines 175-182
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:176: lines 176-182
		if ($selection === null) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:177: characters 19-20
			return "*";
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:178: characters 12-18
			$fields = $selection;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:179: lines 179-181
			$_this = \Reflect::fields($fields);
			$f = function ($name)  use (&$fields, &$_gthis) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:180: characters 30-42
				$f1 = \Reflect::field($fields, $name);
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:180: characters 11-43
				return $_gthis->field($name, $f1);
			};
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:179: lines 179-181
			$result = [];
			$collection = $_this->arr;
			foreach ($collection as $key => $value) {
				$result[] = $f($value);
			}

			return \Array_hx::wrap($result)->join($this->separate);
		}
	}

	/**
	 * @param Target $from
	 * 
	 * @return string
	 */
	public function target ($from) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:185: lines 185-202
		$__hx__switch = ($from->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:186: characters 25-30
			$alias = $from->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:186: characters 19-23
			$name = $from->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:187: lines 187-188
			return ($this->sanitizer->ident($name)??'null') . ((($alias !== null ? " AS " . ($this->sanitizer->ident($alias)??'null') : ""))??'null');
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:189: characters 37-41
			$cond = $from->params[3];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:189: characters 31-35
			$type = $from->params[2];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:189: characters 24-29
			$right = $from->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:189: characters 18-22
			$left = $from->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:191: characters 11-23
			$parts = $this->target($left);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:192: lines 192-196
			$parts1 = null;
			if ($type === null) {
				$parts1 = "INNER";
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:192: characters 18-22
				if ($type === "left") {
					#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:192: lines 192-196
					$parts1 = "LEFT";
				} else if ($type === "right") {
					$parts1 = "RIGHT";
				}
			}
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:198: characters 11-24
			$parts2 = $this->target($right);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:190: lines 190-201
			$parts3 = \Array_hx::wrap([
				$parts,
				$parts1,
				"JOIN",
				$parts2,
				"ON",
				$this->expr($cond),
			]);
			$f = function ($part) {
				return $part !== "";
			};
			$result = [];
			$collection = $parts3->arr;
			foreach ($collection as $key => $value) {
				if ($f($value)) {
					$result[] = $value;
				}
			}

			return \Array_hx::wrap($result)->join(" ");
		}
	}

	/**
	 * @param object $type
	 * 
	 * @return DataType
	 */
	public function toDataType ($type) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:352: characters 5-10
		throw new HxException("implement");
	}

	/**
	 * @param DataType $type
	 * 
	 * @return string
	 */
	public function type ($type) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:69: lines 69-95
		$__hx__switch = ($type->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:70: characters 18-19
			$d = $type->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:71: characters 21-34
			$defaultValue = $d;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:71: characters 9-34
			return "TINYINT" . ((($defaultValue === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue)??'null')))??'null');
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:69: characters 19-23
			$__hx__switch = ($type->params[0]->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:74: characters 34-35
				$d1 = $type->params[3];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:74: characters 23-29
				$signed = $type->params[1];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:75: characters 49-62
				$defaultValue1 = $d1;
				$tmp = ($defaultValue1 === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue1)??'null'));
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:75: characters 9-62
				return "TINYINT" . (((!$signed ? " UNSIGNED" : ""))??'null') . ($tmp??'null');
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:76: characters 35-36
				$d2 = $type->params[3];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:76: characters 24-30
				$signed1 = $type->params[1];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:77: characters 50-63
				$defaultValue2 = $d2;
				$tmp1 = ($defaultValue2 === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue2)??'null'));
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:77: characters 9-63
				return "SMALLINT" . (((!$signed1 ? " UNSIGNED" : ""))??'null') . ($tmp1??'null');
			} else if ($__hx__switch === 2) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:78: characters 36-37
				$d3 = $type->params[3];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:78: characters 25-31
				$signed2 = $type->params[1];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:79: characters 51-64
				$defaultValue3 = $d3;
				$tmp2 = ($defaultValue3 === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue3)??'null'));
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:79: characters 9-64
				return "MEDIUMINT" . (((!$signed2 ? " UNSIGNED" : ""))??'null') . ($tmp2??'null');
			} else if ($__hx__switch === 3) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:80: characters 37-38
				$d4 = $type->params[3];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:80: characters 26-32
				$signed3 = $type->params[1];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:81: characters 45-58
				$defaultValue4 = $d4;
				$tmp3 = ($defaultValue4 === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue4)??'null'));
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:81: characters 9-58
				return "INT" . (((!$signed3 ? " UNSIGNED" : ""))??'null') . ($tmp3??'null');
			}
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:72: characters 20-21
			$d5 = $type->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:73: characters 20-33
			$defaultValue5 = $d5;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:73: characters 9-33
			return "DOUBLE" . ((($defaultValue5 === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue5)??'null')))??'null');
		} else if ($__hx__switch === 3) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:82: characters 31-32
			$d6 = $type->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:82: characters 20-29
			$maxLength = $type->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:84: characters 24-37
			$defaultValue6 = $d6;
			$tmp4 = ($defaultValue6 === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue6)??'null'));
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:83: lines 83-84
			return ((($maxLength < 65536 ? "VARCHAR(" . ($maxLength??'null') . ")" : "TEXT"))??'null') . ($tmp4??'null');
		} else if ($__hx__switch === 5) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:85: characters 18-27
			$maxLength1 = $type->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:86: lines 86-87
			if ($maxLength1 < 65536) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:86: characters 33-54
				return "VARBINARY(" . ($maxLength1??'null') . ")";
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:87: characters 15-19
				return "BLOB";
			}
		} else if ($__hx__switch === 7) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:88: characters 22-23
			$d7 = $type->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:89: characters 22-35
			$defaultValue7 = $d7;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:89: characters 9-35
			return "DATETIME" . ((($defaultValue7 === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue7)??'null')))??'null');
		} else if ($__hx__switch === 8) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:90: characters 23-24
			$d8 = $type->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:91: characters 23-36
			$defaultValue8 = $d8;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:91: characters 9-36
			return "Timestamp" . ((($defaultValue8 === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue8)??'null')))??'null');
		} else if ($__hx__switch === 12) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:92: characters 27-28
			$d9 = $type->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:92: characters 21-25
			$type1 = $type->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:93: characters 16-29
			$defaultValue9 = $d9;
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:93: characters 9-29
			return ($type1??'null') . ((($defaultValue9 === null ? "" : " DEFAULT " . ($this->sanitizer->value($defaultValue9)??'null')))??'null');
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:94: characters 16-21
			throw new HxException("Type not support in current formatter: " . (\Std::string($type)??'null'));
		}
	}

	/**
	 * @param UnOp $o
	 * 
	 * @return string
	 */
	public function unOp ($o) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:295: lines 295-299
		$__hx__switch = ($o->index);
		if ($__hx__switch === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:297: characters 18-21
			return "NOT";
		} else if ($__hx__switch === 1) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:296: characters 21-28
			return "IS NULL";
		} else if ($__hx__switch === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:298: characters 18-19
			return "-";
		}
	}

	/**
	 * @param object $union
	 * 
	 * @return string
	 */
	public function union ($union) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:252: characters 7-38
		$parts = "(" . ($this->format($union->left)??'null') . ")";
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:254: characters 7-34
		$parts1 = (!$union->distinct ? "ALL" : "");
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:255: characters 7-39
		$parts2 = "(" . ($this->format($union->right)??'null') . ")";
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:251: lines 251-257
		$parts3 = \Array_hx::wrap([
			$parts,
			"UNION",
			$parts1,
			$parts2,
			$this->limit($union->limit),
		]);
		$f = function ($part) {
			return $part !== "";
		};
		$result = [];
		$collection = $parts3->arr;
		foreach ($collection as $key => $value) {
			if ($f($value)) {
				$result[] = $value;
			}
		}

		return \Array_hx::wrap($result)->join(" ");
	}

	/**
	 * @param object $update
	 * 
	 * @return string
	 */
	public function update ($update) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:259: lines 259-269
		$_gthis = $this;
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:262: characters 7-36
		$name = $update->table->getName();
		$parts = $this->sanitizer->ident($name);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:264: lines 264-266
		$_this = $update->set;
		$f = function ($set)  use (&$_gthis) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:265: characters 16-37
			$name1 = Field_Impl_::get_name($set->field);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:265: characters 9-60
			return ($_gthis->sanitizer->ident($name1)??'null') . "=" . ($_gthis->expr($set->expr)??'null');
		};
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:264: lines 264-266
		$result = [];
		$collection = $_this->arr;
		foreach ($collection as $key => $value) {
			$result[] = $f($value);
		}

		$parts1 = \Array_hx::wrap($result)->join($this->separate);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:267: characters 7-26
		$parts2 = $this->where($update->where);
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:268: characters 7-56
		$parts3 = ($update->max !== null ? $this->limit(Limit_Impl_::ofInt($update->max)) : "");
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:260: lines 260-269
		$f1 = function ($part) {
			return $part !== "";
		};
		$result1 = [];
		$collection1 = (\Array_hx::wrap([
			"UPDATE",
			$parts,
			"SET",
			$parts1,
			$parts2,
			$parts3,
		]))->arr;
		foreach ($collection1 as $key1 => $value1) {
			if ($f1($value1)) {
				$result1[] = $value1;
			}
		}

		return \Array_hx::wrap($result1)->join(" ");
	}

	/**
	 * @param mixed $value
	 * 
	 * @return string
	 */
	public function value ($value) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:45: characters 5-34
		return $this->sanitizer->value($value);
	}

	/**
	 * @param \Array_hx $values
	 * 
	 * @return string
	 */
	public function values ($values) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:305: characters 24-41
		$f = Boot::getInstanceClosure($this, 'value');
		$result = [];
		$collection = $values->arr;
		foreach ($collection as $key => $value) {
			$result[] = $f($value);
		}

		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:305: characters 12-57
		return "(" . (\Array_hx::wrap($result)->join($this->separate)??'null') . ")";
	}

	/**
	 * @param ExprData $condition
	 * 
	 * @return string
	 */
	public function where ($condition) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:228: lines 228-230
		if ($condition !== null) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:229: characters 7-33
			return "WHERE " . ($this->expr($condition)??'null');
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/format/SqlFormatter.hx:230: characters 10-12
			return "";
		}
	}
}

Boot::registerClass(SqlFormatter::class, 'tink.sql.format.SqlFormatter');
