<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Info.hx
 */

namespace tink\sql;

use \php\Boot;
use \php\_Boot\HxEnum;

class DataType extends HxEnum {
	/**
	 * @param int $maxLength
	 * 
	 * @return DataType
	 */
	static public function DBlob ($maxLength) {
		return new DataType('DBlob', 5, [$maxLength]);
	}

	/**
	 * @param bool $byDefault
	 * 
	 * @return DataType
	 */
	static public function DBool ($byDefault = null) {
		return new DataType('DBool', 0, [$byDefault]);
	}

	/**
	 * @param \Date $byDefault
	 * 
	 * @return DataType
	 */
	static public function DDate ($byDefault = null) {
		return new DataType('DDate', 6, [$byDefault]);
	}

	/**
	 * @param \Date $byDefault
	 * 
	 * @return DataType
	 */
	static public function DDateTime ($byDefault = null) {
		return new DataType('DDateTime', 7, [$byDefault]);
	}

	/**
	 * @param float $byDefault
	 * 
	 * @return DataType
	 */
	static public function DDouble ($byDefault = null) {
		return new DataType('DDouble', 2, [$byDefault]);
	}

	/**
	 * @param IntSize $size
	 * @param bool $signed
	 * @param bool $autoIncrement
	 * @param int $byDefault
	 * 
	 * @return DataType
	 */
	static public function DInt ($size, $signed, $autoIncrement, $byDefault = null) {
		return new DataType('DInt', 1, [$size, $signed, $autoIncrement, $byDefault]);
	}

	/**
	 * @return DataType
	 */
	static public function DMultiPolygon () {
		static $inst = null;
		if (!$inst) $inst = new DataType('DMultiPolygon', 11, []);
		return $inst;
	}

	/**
	 * @return DataType
	 */
	static public function DPoint () {
		static $inst = null;
		if (!$inst) $inst = new DataType('DPoint', 9, []);
		return $inst;
	}

	/**
	 * @return DataType
	 */
	static public function DPolygon () {
		static $inst = null;
		if (!$inst) $inst = new DataType('DPolygon', 10, []);
		return $inst;
	}

	/**
	 * @param int $maxLength
	 * @param string $byDefault
	 * 
	 * @return DataType
	 */
	static public function DString ($maxLength, $byDefault = null) {
		return new DataType('DString', 3, [$maxLength, $byDefault]);
	}

	/**
	 * @param TextSize $size
	 * @param string $byDefault
	 * 
	 * @return DataType
	 */
	static public function DText ($size, $byDefault = null) {
		return new DataType('DText', 4, [$size, $byDefault]);
	}

	/**
	 * @param \Date $byDefault
	 * 
	 * @return DataType
	 */
	static public function DTimestamp ($byDefault = null) {
		return new DataType('DTimestamp', 8, [$byDefault]);
	}

	/**
	 * @param string $type
	 * @param string $byDefault
	 * 
	 * @return DataType
	 */
	static public function DUnknown ($type, $byDefault) {
		return new DataType('DUnknown', 12, [$type, $byDefault]);
	}

	/**
	 * Returns array of (constructorIndex => constructorName)
	 *
	 * @return string[]
	 */
	static public function __hx__list () {
		return [
			5 => 'DBlob',
			0 => 'DBool',
			6 => 'DDate',
			7 => 'DDateTime',
			2 => 'DDouble',
			1 => 'DInt',
			11 => 'DMultiPolygon',
			9 => 'DPoint',
			10 => 'DPolygon',
			3 => 'DString',
			4 => 'DText',
			8 => 'DTimestamp',
			12 => 'DUnknown',
		];
	}

	/**
	 * Returns array of (constructorName => parametersCount)
	 *
	 * @return int[]
	 */
	static public function __hx__paramsCount () {
		return [
			'DBlob' => 1,
			'DBool' => 1,
			'DDate' => 1,
			'DDateTime' => 1,
			'DDouble' => 1,
			'DInt' => 4,
			'DMultiPolygon' => 0,
			'DPoint' => 0,
			'DPolygon' => 0,
			'DString' => 2,
			'DText' => 2,
			'DTimestamp' => 1,
			'DUnknown' => 2,
		];
	}
}

Boot::registerClass(DataType::class, 'tink.sql.DataType');
