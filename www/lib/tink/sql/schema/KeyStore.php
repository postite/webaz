<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx
 */

namespace tink\sql\schema;

use \tink\sql\Key;
use \php\Boot;
use \haxe\ds\StringMap;
use \php\_Boot\HxException;

class KeyStore {
	/**
	 * @var StringMap
	 */
	public $namedKeys;
	/**
	 * @var \Array_hx
	 */
	public $primaryFields;

	/**
	 * @return void
	 */
	public function __construct () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:7: characters 19-41
		$this->namedKeys = new StringMap();
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:6: characters 23-25
		$this->primaryFields = new \Array_hx();
	}

	/**
	 * @param string $name
	 * @param string $field
	 * 
	 * @return void
	 */
	public function addIndex ($name, $field) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:23: lines 23-28
		if (array_key_exists($name, $this->namedKeys->data)) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:24: characters 14-29
			$_g = ($this->namedKeys->data[$name] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:24: lines 24-26
			if ($_g === null) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:26: characters 18-23
				throw new HxException("Key \"" . ($name??'null') . "\" is of different type");
			} else if ($_g->index === 2) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:25: characters 23-29
				$fields = $_g->params[1];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:25: characters 32-50
				$fields->arr[$fields->length] = $field;
				++$fields->length;

			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:26: characters 18-23
				throw new HxException("Key \"" . ($name??'null') . "\" is of different type");
			}
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:28: characters 10-51
			$this->namedKeys->data[$name] = Key::Index($name, \Array_hx::wrap([$field]));
		}
	}

	/**
	 * @param string $field
	 * 
	 * @return void
	 */
	public function addPrimary ($field) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:12: characters 5-30
		$_this = $this->primaryFields;
		$_this->arr[$_this->length] = $field;
		++$_this->length;
	}

	/**
	 * @param string $name
	 * @param string $field
	 * 
	 * @return void
	 */
	public function addUnique ($name, $field) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:15: lines 15-20
		if (array_key_exists($name, $this->namedKeys->data)) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:16: characters 14-29
			$_g = ($this->namedKeys->data[$name] ?? null);
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:16: lines 16-18
			if ($_g === null) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:18: characters 18-23
				throw new HxException("Key \"" . ($name??'null') . "\" is of different type");
			} else if ($_g->index === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:17: characters 24-30
				$fields = $_g->params[1];
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:17: characters 33-51
				$fields->arr[$fields->length] = $field;
				++$fields->length;

			} else {
				#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:18: characters 18-23
				throw new HxException("Key \"" . ($name??'null') . "\" is of different type");
			}
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:20: characters 10-52
			$this->namedKeys->data[$name] = Key::Unique($name, \Array_hx::wrap([$field]));
		}
	}

	/**
	 * @return \Array_hx
	 */
	public function get () {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/schema/KeyStore.hx:31: lines 31-34
		return Boot::deref((($this->primaryFields->length > 0 ? \Array_hx::wrap([Key::Primary($this->primaryFields)]) : new \Array_hx())))->concat(\Lambda::array($this->namedKeys));
	}
}

Boot::registerClass(KeyStore::class, 'tink.sql.schema.KeyStore');
