<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx
 */

namespace tink\sql\_Expr;

use \tink\sql\ExprData;
use \tink\sql\UnOp;
use \tink\sql\ValueType;
use \php\Boot;
use \tink\sql\BinOp;
use \haxe\io\Bytes;

final class Expr_Impl_ {

	/**
	 * @param ExprData $e
	 * 
	 * @return ExprData
	 */
	static public function _new ($e) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:33: character 3
		return $e;
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function add ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:45: characters 7-31
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Add(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function addConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:95: characters 7-44
		return Expr_Impl_::add($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function and ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:181: lines 181-183
		if ($a === null) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:181: characters 27-28
			return $b;
		} else if ($b === null) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:182: characters 27-28
			return $a;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:183: characters 11-37
			return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::And(), $a, $b));
		}
	}

	/**
	 * @param bool $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function constOr ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:190: characters 7-45
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Or(), Expr_Impl_::ofData(ExprData::EValue($a, ValueType::VBool())), $b));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function div ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:54: characters 7-31
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Div(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function divByConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:108: characters 7-44
		return Expr_Impl_::div($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param mixed $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function divConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:111: characters 7-44
		return Expr_Impl_::div(Expr_Impl_::ofData(ExprData::EValue($a, ValueType::VFloat())), $b);
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function eq ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:62: characters 7-34
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Equals(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param bool $b
	 * 
	 * @return ExprData
	 */
	static public function eqBool ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:123: characters 7-37
		return Expr_Impl_::eq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VBool())));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function eqBytes ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:171: characters 7-43
		return Expr_Impl_::eq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VBytes())));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function eqFloat ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:139: characters 7-43
		return Expr_Impl_::eq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param string $b
	 * 
	 * @return ExprData
	 */
	static public function eqString ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:131: characters 7-39
		return Expr_Impl_::eq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VString())));
	}

	/**
	 * @param ExprData $this
	 * 
	 * @return ExprData
	 */
	static public function get_data ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:41: characters 7-18
		return $this1;
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function gt ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:68: characters 7-35
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function gtConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:146: characters 7-43
		return Expr_Impl_::gt($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function gtDate ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:80: characters 7-35
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param \Date $b
	 * 
	 * @return ExprData
	 */
	static public function gtDateConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:158: characters 7-41
		return Expr_Impl_::gtDate($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VDate())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function gte ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:74: characters 7-40
		return Expr_Impl_::not(Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $b, $a)));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function gteConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:152: characters 7-44
		return Expr_Impl_::gte($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function gteDate ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:86: characters 7-40
		return Expr_Impl_::not(Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $b, $a)));
	}

	/**
	 * @param ExprData $a
	 * @param \Date $b
	 * 
	 * @return ExprData
	 */
	static public function gteDateConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:164: characters 7-42
		return Expr_Impl_::gteDate($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VDate())));
	}

	/**
	 * @param ExprData $this
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function inArray ($this1, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:202: characters 5-31
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::In(), Expr_Impl_::ofData($this1), $b));
	}

	/**
	 * @param ExprData $this
	 * 
	 * @return ExprData
	 */
	static public function isNull ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:198: characters 5-37
		return Expr_Impl_::ofData(ExprData::EUnOp(UnOp::IsNull(), Expr_Impl_::ofData($this1), true));
	}

	/**
	 * @param ExprData $this
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function like ($this1, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:205: characters 5-33
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Like(), Expr_Impl_::ofData($this1), $b));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function lt ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:71: characters 7-35
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $b, $a));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function ltConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:149: characters 7-43
		return Expr_Impl_::lt($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function ltDate ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:83: characters 7-35
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $b, $a));
	}

	/**
	 * @param ExprData $a
	 * @param \Date $b
	 * 
	 * @return ExprData
	 */
	static public function ltDateConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:161: characters 7-41
		return Expr_Impl_::ltDate($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VDate())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function lte ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:77: characters 7-40
		return Expr_Impl_::not(Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $a, $b)));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function lteConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:155: characters 7-44
		return Expr_Impl_::lte($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function lteDate ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:89: characters 7-40
		return Expr_Impl_::not(Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $a, $b)));
	}

	/**
	 * @param ExprData $a
	 * @param \Date $b
	 * 
	 * @return ExprData
	 */
	static public function lteDateConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:167: characters 7-42
		return Expr_Impl_::lteDate($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VDate())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function mod ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:57: characters 7-31
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Mod(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function modByConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:114: characters 7-44
		return Expr_Impl_::mod($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param mixed $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function modConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:117: characters 7-44
		return Expr_Impl_::mod(Expr_Impl_::ofData(ExprData::EValue($a, ValueType::VFloat())), $b);
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function mult ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:51: characters 7-32
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Mult(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function multConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:105: characters 7-45
		return Expr_Impl_::mult($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function neq ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:65: characters 7-25
		return Expr_Impl_::not(Expr_Impl_::eq($a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param bool $b
	 * 
	 * @return ExprData
	 */
	static public function neqBool ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:127: characters 7-38
		return Expr_Impl_::neq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VBool())));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function neqFloat ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:143: characters 7-44
		return Expr_Impl_::neq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param string $b
	 * 
	 * @return ExprData
	 */
	static public function neqString ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:135: characters 7-40
		return Expr_Impl_::neq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VString())));
	}

	/**
	 * @param ExprData $c
	 * 
	 * @return ExprData
	 */
	static public function not ($c) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:176: characters 7-34
		return Expr_Impl_::ofData(ExprData::EUnOp(UnOp::Not(), $c, false));
	}

	/**
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function ofBool ($b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:220: characters 5-38
		return ExprData::EValue($b, ValueType::VBool());
	}

	/**
	 * @param Bytes $b
	 * 
	 * @return ExprData
	 */
	static public function ofBytes ($b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:238: characters 5-29
		return Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VBytes()));
	}

	/**
	 * @param ExprData $d
	 * 
	 * @return ExprData
	 */
	static public function ofData ($d) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:36: characters 12-23
		return $d;
	}

	/**
	 * @param mixed $s
	 * 
	 * @return ExprData
	 */
	static public function ofDate ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:223: characters 5-33
		return Expr_Impl_::ofData(ExprData::EValue($s, ValueType::VDate()));
	}

	/**
	 * @param float $s
	 * 
	 * @return ExprData
	 */
	static public function ofFloat ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:232: characters 5-29
		return Expr_Impl_::ofData(ExprData::EValue($s, ValueType::VFloat()));
	}

	/**
	 * @param \Array_hx $v
	 * 
	 * @return ExprData
	 */
	static public function ofFloatArray ($v) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:214: characters 5-42
		return Expr_Impl_::ofData(ExprData::EValue($v, ValueType::VArray(ValueType::VFloat())));
	}

	/**
	 * @param \Array_hx $v
	 * 
	 * @return ExprData
	 */
	static public function ofIdArray ($v) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:208: characters 5-40
		return Expr_Impl_::ofData(ExprData::EValue($v, ValueType::VArray(ValueType::VInt())));
	}

	/**
	 * @param int $s
	 * 
	 * @return ExprData
	 */
	static public function ofInt ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:229: characters 5-27
		return Expr_Impl_::ofData(ExprData::EValue($s, ValueType::VInt()));
	}

	/**
	 * @param \Array_hx $v
	 * 
	 * @return ExprData
	 */
	static public function ofIntArray ($v) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:211: characters 5-40
		return Expr_Impl_::ofData(ExprData::EValue($v, ValueType::VArray(ValueType::VInt())));
	}

	/**
	 * @param object $p
	 * 
	 * @return ExprData
	 */
	static public function ofPoint ($p) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:235: characters 5-39
		return Expr_Impl_::ofData(ExprData::EValue($p, ValueType::VGeometry("Point")));
	}

	/**
	 * @param mixed $s
	 * 
	 * @return ExprData
	 */
	static public function ofString ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:226: characters 5-35
		return Expr_Impl_::ofData(ExprData::EValue($s, ValueType::VString()));
	}

	/**
	 * @param \Array_hx $v
	 * 
	 * @return ExprData
	 */
	static public function ofStringArray ($v) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:217: characters 5-43
		return Expr_Impl_::ofData(ExprData::EValue($v, ValueType::VArray(ValueType::VString())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function or ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:187: characters 7-30
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Or(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param bool $b
	 * 
	 * @return ExprData
	 */
	static public function orConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:193: characters 7-45
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Or(), $a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VBool()))));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function subt ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:48: characters 7-32
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Subt(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function subtByConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:98: characters 7-45
		return Expr_Impl_::subt($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param mixed $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function subtConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:101: characters 7-45
		return Expr_Impl_::subt(Expr_Impl_::ofData(ExprData::EValue($a, ValueType::VFloat())), $b);
	}
}

Boot::registerClass(Expr_Impl_::class, 'tink.sql._Expr.Expr_Impl_');
Boot::registerGetters('tink\\sql\\_Expr\\Expr_Impl_', [
	'data' => true
]);
