<?php
/**
 * Generated by Haxe 4.0.0-rc.1+1fdd3d5
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx
 */

namespace tink\sql\_Expr;

use \tink\sql\ExprData;
use \tink\sql\FieldUpdate;
use \tink\sql\UnOp;
use \tink\sql\ValueType;
use \php\Boot;
use \tink\sql\BinOp;
use \php\_Boot\HxException;

final class Field_Impl_ {

	/**
	 * @param string $table
	 * @param string $name
	 * 
	 * @return ExprData
	 */
	static public function _new ($table, $name) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:301: character 3
		$this1 = Expr_Impl_::ofData(ExprData::EField($table, $name));
		return $this1;
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function add ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:306: characters 7-31
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Add(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function addConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:356: characters 7-50
		return Expr_Impl_::add($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function and ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:440: characters 7-31
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::And(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function div ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:315: characters 7-31
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Div(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function divByConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:369: characters 7-50
		return Expr_Impl_::div($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param mixed $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function divConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:372: characters 7-50
		return Expr_Impl_::div(Expr_Impl_::ofData(ExprData::EValue($a, ValueType::VFloat())), $b);
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function eq ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:323: characters 7-34
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Equals(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param bool $b
	 * 
	 * @return ExprData
	 */
	static public function eqBool ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:384: characters 7-48
		return Expr_Impl_::eq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VBool())));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function eqBytes ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:432: characters 7-51
		return Expr_Impl_::eq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VBytes())));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function eqFloat ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:400: characters 7-51
		return Expr_Impl_::eq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param string $b
	 * 
	 * @return ExprData
	 */
	static public function eqString ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:392: characters 7-52
		return Expr_Impl_::eq($a, ExprData::EValue($b, ValueType::VString()));
	}

	/**
	 * @param ExprData $this
	 * 
	 * @return string
	 */
	static public function get_name ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:285: characters 21-30
		$_g = $this1;
		if ($_g->index === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:286: characters 24-25
			$v = $_g->params[1];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:286: characters 28-29
			return $v;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:287: characters 17-22
			throw new HxException("assert: invalid field " . (\Std::string($_g)??'null'));
		}
	}

	/**
	 * @param ExprData $this
	 * 
	 * @return string
	 */
	static public function get_table ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:293: characters 21-30
		$_g = $this1;
		if ($_g->index === 2) {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:294: characters 21-22
			$v = $_g->params[0];
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:294: characters 28-29
			return $v;
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:295: characters 17-22
			throw new HxException("assert: invalid field " . (\Std::string($_g)??'null'));
		}
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function gt ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:329: characters 7-35
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function gtConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:407: characters 7-50
		return Expr_Impl_::gt($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function gtDate ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:341: characters 7-35
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param \Date $b
	 * 
	 * @return ExprData
	 */
	static public function gtDateConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:419: characters 7-47
		return Expr_Impl_::gtDate($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VDate())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function gte ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:335: characters 7-22
		return Expr_Impl_::not(Field_Impl_::gt($b, $a));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function gteConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:413: characters 7-51
		return Expr_Impl_::gte($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function gteDate ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:347: characters 7-22
		return Expr_Impl_::not(Field_Impl_::gtDate($b, $a));
	}

	/**
	 * @param ExprData $a
	 * @param \Date $b
	 * 
	 * @return ExprData
	 */
	static public function gteDateConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:425: characters 7-48
		return Expr_Impl_::gteDate($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VDate())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function lt ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:332: characters 7-35
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $b, $a));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function ltConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:410: characters 7-50
		return Expr_Impl_::lt($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function ltDate ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:344: characters 7-35
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Greater(), $b, $a));
	}

	/**
	 * @param ExprData $a
	 * @param \Date $b
	 * 
	 * @return ExprData
	 */
	static public function ltDateConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:422: characters 7-47
		return Expr_Impl_::ltDate($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VDate())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function lte ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:338: characters 7-22
		return Expr_Impl_::not(Field_Impl_::gt($a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function lteConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:416: characters 7-51
		return Expr_Impl_::lte($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function lteDate ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:350: characters 7-22
		return Expr_Impl_::not(Field_Impl_::gtDate($a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param \Date $b
	 * 
	 * @return ExprData
	 */
	static public function lteDateConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:428: characters 7-48
		return Expr_Impl_::lteDate($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VDate())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function mod ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:318: characters 7-31
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Mod(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function modByConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:375: characters 7-50
		return Expr_Impl_::mod($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param mixed $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function modConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:378: characters 7-50
		return Expr_Impl_::mod(Expr_Impl_::ofData(ExprData::EValue($a, ValueType::VFloat())), $b);
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function mult ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:312: characters 7-32
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Mult(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function multConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:366: characters 7-50
		return Expr_Impl_::mult($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function neq ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:326: characters 7-23
		return Expr_Impl_::not(Field_Impl_::eq($a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param bool $b
	 * 
	 * @return ExprData
	 */
	static public function neqBool ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:388: characters 7-48
		return Expr_Impl_::neq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VBool())));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function neqFloat ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:404: characters 7-51
		return Expr_Impl_::neq($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param ExprData $a
	 * @param string $b
	 * 
	 * @return ExprData
	 */
	static public function neqString ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:396: characters 7-52
		return Expr_Impl_::neq($a, ExprData::EValue($b, ValueType::VString()));
	}

	/**
	 * @param ExprData $c
	 * 
	 * @return ExprData
	 */
	static public function not ($c) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:437: characters 7-34
		return Expr_Impl_::ofData(ExprData::EUnOp(UnOp::Not(), $c, false));
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function or ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:443: characters 7-30
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Or(), $a, $b));
	}

	/**
	 * @param ExprData $this
	 * @param ExprData $e
	 * 
	 * @return FieldUpdate
	 */
	static public function set ($this1, $e) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:299: characters 5-41
		return new FieldUpdate($this1, $e);
	}

	/**
	 * @param ExprData $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function subt ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:309: characters 7-32
		return Expr_Impl_::ofData(ExprData::EBinOp(BinOp::Subt(), $a, $b));
	}

	/**
	 * @param ExprData $a
	 * @param mixed $b
	 * 
	 * @return ExprData
	 */
	static public function subtByConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:359: characters 7-50
		return Expr_Impl_::subt($a, Expr_Impl_::ofData(ExprData::EValue($b, ValueType::VFloat())));
	}

	/**
	 * @param mixed $a
	 * @param ExprData $b
	 * 
	 * @return ExprData
	 */
	static public function subtConst ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_sql/0.0.0-alpha.0/github/485516a0ac3307cf25ff126f4feafff93a01878a/src/tink/sql/Expr.hx:362: characters 7-50
		return Expr_Impl_::subt(Expr_Impl_::ofData(ExprData::EValue($a, ValueType::VFloat())), $b);
	}
}

Boot::registerClass(Field_Impl_::class, 'tink.sql._Expr.Field_Impl_');
Boot::registerGetters('tink\\sql\\_Expr\\Field_Impl_', [
	'table' => true,
	'name' => true
]);
