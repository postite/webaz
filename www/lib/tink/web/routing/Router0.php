<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx
 */

namespace tink\web\routing;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \tink\querystring\_Pairs\Pairs_Impl_;
use \php\Boot;
use \tink\core\TypedError;
use \tink\core\Outcome;
use \tink\querystring\Parser0 as QuerystringParser0;
use \tink\json\Parser0;
use \tink\core\_Lazy\LazyConst;
use \app\Root;
use \tink\json\Writer0;
use \tink\core\_Promise\Next_Impl_;
use \tink\web\routing\_Response\Response_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \tink\core\_Future\FutureObject;

class Router0 {
	/**
	 * @var Root
	 */
	public $target;

	/**
	 * @param Root $target
	 * 
	 * @return void
	 */
	public function __construct ($target) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:218: characters 11-31
		$this->target = $target;
	}

	/**
	 * @param Context $ctx
	 * 
	 * @return FutureObject
	 */
	public function hello ($ctx) {
		#src/app/Server.hx:62: lines 62-65
		return Promise_Impl_::next(new SyncFuture(new LazyConst(Outcome::Success($this->target->hello()))), Next_Impl_::ofSafeSync(function ($v) {
			return Response_Impl_::ofHtml($v);
		}));
	}

	/**
	 * @param Context $ctx
	 * 
	 * @return FutureObject
	 */
	public function route ($ctx) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:222: characters 11-34
		$l = $ctx->parts->length - $ctx->depth;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:143: characters 22-31
		$_g = $l > 1;
		$_g1 = $l > 0;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:140: characters 22-41
		$_g2 = $ctx->part(0);
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:137: characters 22-39
		$_g3 = $ctx->request->header->method;
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:140: characters 22-41
		if ($_g2 === "rss") {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:137: characters 22-39
			if ($_g3 === "GET") {
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:143: characters 22-31
				if ($_g1 === false) {
					#src/app/Server.hx:61: characters 8-11
					return Promise_Impl_::ofSpecific($this->hello($ctx));
				} else if ($_g1 === true) {
					#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:143: characters 22-31
					if ($_g === false) {
						#src/app/Server.hx:66: characters 8-14
						return Promise_Impl_::ofSpecific($this->rss($ctx));
					} else {
						#src/app/Server.hx:32: characters 20-32
						$this1 = $ctx->request->header->url;
						return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this1->query === null ? $this1->path : ($this1->path??'null') . "?" . ($this1->query??'null')))??'null'), new HxAnon([
							"fileName" => "src/app/Server.hx",
							"lineNumber" => 32,
							"className" => "tink.web.routing.Router0",
							"methodName" => "route",
						])))));
					}
				}
			} else {
				$this2 = $ctx->request->header->url;
				return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this2->query === null ? $this2->path : ($this2->path??'null') . "?" . ($this2->query??'null')))??'null'), new HxAnon([
					"fileName" => "src/app/Server.hx",
					"lineNumber" => 32,
					"className" => "tink.web.routing.Router0",
					"methodName" => "route",
				])))));
			}
		} else if ($_g2 === "sqlit") {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:143: characters 22-31
			if ($_g1 === false) {
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:137: characters 22-39
				if ($_g3 === "GET") {
					#src/app/Server.hx:61: characters 8-11
					return Promise_Impl_::ofSpecific($this->hello($ctx));
				} else {
					#src/app/Server.hx:32: characters 20-32
					$this3 = $ctx->request->header->url;
					return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this3->query === null ? $this3->path : ($this3->path??'null') . "?" . ($this3->query??'null')))??'null'), new HxAnon([
						"fileName" => "src/app/Server.hx",
						"lineNumber" => 32,
						"className" => "tink.web.routing.Router0",
						"methodName" => "route",
					])))));
				}
			} else if ($_g1 === true) {
				#src/app/Server.hx:54: characters 8-17
				return $this->whatever($ctx, 1);
			}
		} else if ($_g2 === "uploadFile") {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:137: characters 22-39
			if ($_g3 === "GET") {
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:143: characters 22-31
				if ($_g1 === false) {
					#src/app/Server.hx:61: characters 8-11
					return Promise_Impl_::ofSpecific($this->hello($ctx));
				} else {
					#src/app/Server.hx:32: characters 20-32
					$this4 = $ctx->request->header->url;
					return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this4->query === null ? $this4->path : ($this4->path??'null') . "?" . ($this4->query??'null')))??'null'), new HxAnon([
						"fileName" => "src/app/Server.hx",
						"lineNumber" => 32,
						"className" => "tink.web.routing.Router0",
						"methodName" => "route",
					])))));
				}
			} else if ($_g3 === "POST") {
				#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:143: characters 22-31
				if (($_g1 === true) && ($_g === false)) {
					#src/app/Server.hx:73: characters 10-23
					return Promise_Impl_::ofSpecific($this->uploadFile($ctx));
				} else {
					#src/app/Server.hx:32: characters 20-32
					$this5 = $ctx->request->header->url;
					return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this5->query === null ? $this5->path : ($this5->path??'null') . "?" . ($this5->query??'null')))??'null'), new HxAnon([
						"fileName" => "src/app/Server.hx",
						"lineNumber" => 32,
						"className" => "tink.web.routing.Router0",
						"methodName" => "route",
					])))));
				}
			} else {
				$this6 = $ctx->request->header->url;
				return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this6->query === null ? $this6->path : ($this6->path??'null') . "?" . ($this6->query??'null')))??'null'), new HxAnon([
					"fileName" => "src/app/Server.hx",
					"lineNumber" => 32,
					"className" => "tink.web.routing.Router0",
					"methodName" => "route",
				])))));
			}
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:137: characters 22-39
			if (($_g3 === "GET") && ($_g1 === false)) {
				#src/app/Server.hx:61: characters 8-11
				return Promise_Impl_::ofSpecific($this->hello($ctx));
			} else {
				#src/app/Server.hx:32: characters 20-32
				$this7 = $ctx->request->header->url;
				return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Not Found: [" . ($ctx->request->header->method??'null') . "] " . ((($this7->query === null ? $this7->path : ($this7->path??'null') . "?" . ($this7->query??'null')))??'null'), new HxAnon([
					"fileName" => "src/app/Server.hx",
					"lineNumber" => 32,
					"className" => "tink.web.routing.Router0",
					"methodName" => "route",
				])))));
			}
		}
	}

	/**
	 * @param Context $ctx
	 * 
	 * @return FutureObject
	 */
	public function rss ($ctx) {
		#src/app/Server.hx:67: lines 67-71
		return Promise_Impl_::next(new SyncFuture(new LazyConst(Outcome::Success($this->target->rss()))), Next_Impl_::ofSafeSync(function ($v) {
			return Response_Impl_::ofHtml($v);
		}));
	}

	/**
	 * @param Context $ctx
	 * 
	 * @return FutureObject
	 */
	public function uploadFile ($ctx) {
		#src/app/Server.hx:74: lines 74-77
		$_gthis = $this;
		$_g1 = null;
		$_g = $ctx->request->header->contentType();
		if ($_g->index === 0) {
			$v = $_g->params[0];
			$_g1 = "" . ($v->type??'null') . "/" . ($v->subtype??'null');
		} else {
			$_g1 = "application/json";
		}
		$tmp = null;
		if ($_g1 === "application/json") {
			$tmp = Promise_Impl_::next($ctx->allRaw(), function ($b) {
				return new SyncFuture(new LazyConst((new Parser0())->tryParse($b->toString())));
			});
		} else if ($_g1 === "application/x-www-form-urlencoded") {
			$tmp = Promise_Impl_::next($ctx->parse(), function ($pairs) {
				return new SyncFuture(new LazyConst((new QuerystringParser0())->tryParse(Pairs_Impl_::ofIterable($pairs))));
			});
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:660: characters 22-29
			$invalid = $_g1;
			#src/app/Server.hx:74: lines 74-77
			$tmp = new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(406, "Cannot process Content-Type " . ($invalid??'null'), new HxAnon([
				"fileName" => "tink/web/macros/Routing.hx",
				"lineNumber" => 661,
				"className" => "tink.web.routing.Router0",
				"methodName" => "uploadFile",
			])))));
		}
		return Promise_Impl_::next($tmp, function ($body)  use (&$_gthis, &$ctx) {
			return Promise_Impl_::next($_gthis->target->uploadFile($body), function ($__data__)  use (&$ctx) {
				if (($ctx->accepts)("application/json")) {
					return new SyncFuture(new LazyConst(Outcome::Success(Response_Impl_::textual(null, "application/json", (new Writer0())->write($__data__)))));
				}
				return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(415, "Unsupported Media Type", new HxAnon([
					"fileName" => "src/app/Server.hx",
					"lineNumber" => 74,
					"className" => "tink.web.routing.Router0",
					"methodName" => "uploadFile",
				])))));
			});
		});
	}

	/**
	 * @param Context $ctx
	 * @param int $__depth__
	 * 
	 * @return FutureObject
	 */
	public function whatever ($ctx, $__depth__) {
		#/Users/ut/haxe/haxe_libraries/tink_web/0.1.4/github/c4323c7b0c2f0b44e696eea51c9bfdff41716880/src/tink/web/macros/Routing.hx:368: characters 13-42
		$ctx1 = $ctx->sub($__depth__);
		#src/app/Server.hx:56: characters 5-45
		return Promise_Impl_::next(new SyncFuture(new LazyConst(Outcome::Success($this->target->whatever))), function ($__target__)  use (&$ctx1) {
			return (new Router1($__target__))->route($ctx1);
		});
	}
}

Boot::registerClass(Router0::class, 'tink.web.routing.Router0');
