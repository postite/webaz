<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx
 */

namespace tink\streams;

use \tink\core\_Signal\Signal_Impl_;
use \php\Boot;
use \tink\core\SignalObject;

class SignalStream extends Generator {
	/**
	 * @param SignalObject $signal
	 * 
	 * @return void
	 */
	public function __construct ($signal) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:721: lines 721-725
		$ret = Signal_Impl_::nextTime($signal)->map(function ($o)  use (&$signal) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:722: characters 14-18
				$data = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:722: characters 21-57
				return Step::Link($data, new SignalStream($signal));
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:723: characters 14-15
				$e = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:723: characters 18-25
				return Step::Fail($e);
			} else if ($__hx__switch === 2) {
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:724: characters 14-17
				return Step::End();
			}
		});
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:721: lines 721-725
		parent::__construct($ret->gather());
	}
}

Boot::registerClass(SignalStream::class, 'tink.streams.SignalStream');
