<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx
 */

namespace tink\streams\_Stream;

use \php\Boot;
use \tink\streams\Step;
use \tink\streams\Generator;
use \tink\streams\Single;
use \tink\core\TypedError;
use \tink\streams\StreamObject;
use \tink\core\_Lazy\LazyConst;
use \tink\streams\FutureStream;
use \tink\core\_Promise\Promise_Impl_;
use \tink\core\_Future\FutureObject;

final class Stream_Impl_ {

	/**
	 * @param StreamObject $this
	 * 
	 * @return StreamObject
	 */
	static public function dirty ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:15: characters 5-21
		return $this1;
	}

	/**
	 * @param FutureObject $f
	 * 
	 * @return StreamObject
	 */
	static public function flatten ($f) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:33: characters 5-31
		return new FutureStream($f);
	}

	/**
	 * @param StreamObject $this
	 * 
	 * @return bool
	 */
	static public function get_depleted ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:12: characters 7-27
		return $this1->get_depleted();
	}

	/**
	 * @param TypedError $e
	 * 
	 * @return StreamObject
	 */
	static public function ofError ($e) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:59: characters 5-30
		return new ErrorStream($e);
	}

	/**
	 * @param object $i
	 * 
	 * @return StreamObject
	 */
	static public function ofIterator ($i) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:21: characters 29-118
		$next = null;
		$next = function ($step)  use (&$next, &$i) {
			#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:21: characters 54-117
			$next1 = null;
			if ($i->hasNext()) {
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:21: characters 75-83
				$next2 = $i->next();
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:21: characters 54-117
				$next1 = Step::Link($next2, Generator::stream($next));
			} else {
				$next1 = Step::End();
			}
			#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:21: characters 49-118
			$step($next1);
		};
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:21: characters 5-119
		return Generator::stream($next);
	}

	/**
	 * @param FutureObject $f
	 * 
	 * @return StreamObject
	 */
	static public function promise ($f) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:53: lines 53-56
		$ret = $f->map(function ($o) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:54: characters 20-21
				$s = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:54: characters 24-33
				return Stream_Impl_::dirty($s);
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:55: characters 20-21
				$e = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:55: characters 24-34
				return Stream_Impl_::ofError($e);
			}
		});
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:53: lines 53-56
		return Stream_Impl_::flatten($ret->gather());
	}

	/**
	 * @param FutureObject $f
	 * 
	 * @return StreamObject
	 */
	static public function promiseIdeal ($f) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:47: characters 5-27
		return Stream_Impl_::promise(Promise_Impl_::ofSpecific($f));
	}

	/**
	 * @param FutureObject $f
	 * 
	 * @return StreamObject
	 */
	static public function promiseReal ($f) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:50: characters 5-27
		return Stream_Impl_::promise(Promise_Impl_::ofSpecific($f));
	}

	/**
	 * @param mixed $i
	 * 
	 * @return StreamObject
	 */
	static public function single ($i) {
		#/Users/ut/haxe/haxe_libraries/tink_streams/0.3.2/haxelib/src/tink/streams/Stream.hx:18: characters 5-25
		return new Single(new LazyConst($i));
	}
}

Boot::registerClass(Stream_Impl_::class, 'tink.streams._Stream.Stream_Impl_');
Boot::registerGetters('tink\\streams\\_Stream\\Stream_Impl_', [
	'depleted' => true
]);
