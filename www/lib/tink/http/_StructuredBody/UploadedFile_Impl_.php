<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx
 */

namespace tink\http\_StructuredBody;

use \php\_Boot\HxAnon;
use \php\Boot;
use \tink\core\Noise;
use \tink\io\_Source\Source_Impl_;
use \tink\streams\Single;
use \tink\core\TypedError;
use \sys\io\File;
use \tink\chunk\ByteChunk;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\io\_Sink\SinkYielding_Impl_;
use \haxe\io\Bytes;

final class UploadedFile_Impl_ {
	/**
	 * @param string $name
	 * @param string $type
	 * @param Bytes $data
	 * 
	 * @return object
	 */
	static public function ofBlob ($name, $type, $data) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx:19: lines 19-41
		return new HxAnon([
			"fileName" => $name,
			"mimeType" => $type,
			"size" => $data->length,
			"read" => function ()  use (&$data) {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx:23: characters 35-46
				return new Single(new LazyConst(ByteChunk::of($data)));
			},
			"saveTo" => function ($path)  use (&$data) {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx:25: characters 9-38
				$name1 = "File sink " . ($path??'null');
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx:26: lines 26-34
				$dest = SinkYielding_Impl_::ofOutput($name1, File::write($path));
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx:35: lines 35-39
				$ret = Source_Impl_::pipeTo(new Single(new LazyConst(ByteChunk::of($data))), $dest, new HxAnon(["end" => true]))->map(function ($r) {
					$__hx__switch = ($r->index);
					if ($__hx__switch === 0) {
						#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx:36: characters 28-42
						return Outcome::Success(Noise::Noise());
					} else if ($__hx__switch === 1) {
						#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx:37: characters 33-85
						return Outcome::Failure(new TypedError(null, "File \$path closed unexpectedly", new HxAnon([
							"fileName" => "tink/http/StructuredBody.hx",
							"lineNumber" => 37,
							"className" => "tink.http._StructuredBody.UploadedFile_Impl_",
							"methodName" => "ofBlob",
						])));
					} else if ($__hx__switch === 2) {
						#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx:38: characters 27-28
						$e = $r->params[0];
						#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx:38: characters 34-44
						return Outcome::Failure($e);
					}
				});
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/StructuredBody.hx:35: lines 35-39
				return $ret->gather();
			},
		]);
	}
}

Boot::registerClass(UploadedFile_Impl_::class, 'tink.http._StructuredBody.UploadedFile_Impl_');
