<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx
 */

namespace tink\http;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \tink\io\RealSourceTools;
use \php\Boot;
use \tink\io\_Source\Source_Impl_;
use \tink\core\TypedError;
use \tink\streams\StreamObject;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxString;
use \tink\core\_Promise\Promise_Impl_;
use \tink\core\_Future\FutureObject;

class IncomingRequest extends Message {
	/**
	 * @var string
	 */
	public $clientIp;

	/**
	 * @param string $clientIp
	 * @param StreamObject $source
	 * 
	 * @return FutureObject
	 */
	static public function parse ($clientIp, $source) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:130: lines 130-145
		return Promise_Impl_::next(RealSourceTools::parse($source, IncomingRequestHeader::parser()), function ($parts)  use (&$clientIp, &$value) {
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:134: characters 11-18
			$parts1 = $parts->a;
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:135: characters 24-50
			$_g = $parts->a->getContentLength();
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:135: lines 135-144
			$d = null;
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:135: characters 24-50
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:136: characters 26-29
				$len = $_g->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:135: lines 135-144
				$d = Source_Impl_::limit($parts->b, $len);
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:139: characters 39-72
				$_g1 = $parts->a->byName("transfer-encoding");
				#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:139: characters 23-37
				$__hx__switch = ($parts->a->method);
				if ($__hx__switch === "GET" || $__hx__switch === "OPTIONS") {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:135: lines 135-144
					$d = Source_Impl_::$EMPTY;
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:139: characters 39-72
					if ($_g1->index === 0) {
						#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:141: characters 34-77
						$_this = HxString::split($_g1->params[0], ",");
						$f = Boot::getStaticClosure(\StringTools::class, 'trim');
						$result = [];
						$collection = $_this->arr;
						foreach ($collection as $key => $value) {
							$result[] = $f($value);
						}

						#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:141: lines 141-142
						if (\Array_hx::wrap($result)->indexOf("chunked") !== -1) {
							#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:141: characters 133-156
							$source1 = $parts->b;
							#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:135: lines 135-144
							$d = Chunked::decoder()->transform($source1);
						} else {
							#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:142: characters 25-79
							return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(411, "Content-Length header missing", new HxAnon([
								"fileName" => "tink/http/Request.hx",
								"lineNumber" => 142,
								"className" => "tink.http.IncomingRequest",
								"methodName" => "parse",
							])))));
						}
					} else {
						return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(411, "Content-Length header missing", new HxAnon([
							"fileName" => "tink/http/Request.hx",
							"lineNumber" => 142,
							"className" => "tink.http.IncomingRequest",
							"methodName" => "parse",
						])))));
					}
				}
			}
			#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:132: lines 132-145
			return new SyncFuture(new LazyConst(Outcome::Success(new IncomingRequest($clientIp, $parts1, IncomingRequestBody::Plain($d)))));
		});
	}

	/**
	 * @param string $clientIp
	 * @param IncomingRequestHeader $header
	 * @param IncomingRequestBody $body
	 * 
	 * @return void
	 */
	public function __construct ($clientIp, $header, $body) {
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:125: characters 5-29
		$this->clientIp = $clientIp;
		#/Users/ut/haxe/haxe_libraries/tink_http/0.8.2/github/c95e2dc46654779b496e5f99d01241b1d572e33c/src/tink/http/Request.hx:126: characters 5-24
		parent::__construct($header, $body);
	}
}

Boot::registerClass(IncomingRequest::class, 'tink.http.IncomingRequest');
