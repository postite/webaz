<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx
 */

namespace tink\io;

use \tink\chunk\ChunkObject;
use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\streams\_Stream\Stream_Impl_;
use \tink\io\_Source\Source_Impl_;
use \tink\streams\Single;
use \tink\core\TypedError;
use \tink\streams\StreamObject;
use \tink\io\_StreamParser\StreamParser_Impl_;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\core\_Promise\Next_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \tink\core\MPair;
use \tink\core\_Future\FutureObject;

class RealSourceTools {
	/**
	 * @param StreamObject $s
	 * 
	 * @return FutureObject
	 */
	static public function all ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:156: lines 156-159
		$ret = Source_Impl_::concatAll($s)->map(function ($o) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:158: characters 19-20
				$e = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:158: characters 23-33
				return Outcome::Failure($e);
			} else if ($__hx__switch === 2) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:157: characters 20-21
				$c = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:157: characters 24-34
				return Outcome::Success($c);
			}
		});
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:156: lines 156-159
		return $ret->gather();
	}

	/**
	 * @param StreamObject $s
	 * @param \Closure $rescue
	 * 
	 * @return StreamObject
	 */
	static public function idealize ($s, $rescue) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:187: characters 5-69
		return Source_Impl_::chunked($s)->idealize($rescue);
	}

	/**
	 * @param StreamObject $s
	 * @param StreamParserObject $p
	 * 
	 * @return FutureObject
	 */
	static public function parse ($s, $p) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:162: lines 162-165
		$ret = StreamParser_Impl_::parse($s, $p)->map(function ($r) {
			$__hx__switch = ($r->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:163: characters 25-29
				$rest = $r->params[1];
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:163: characters 19-23
				$data = $r->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:163: characters 40-60
				$this1 = new MPair($data, $rest);
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:163: characters 32-61
				return Outcome::Success($this1);
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:164: characters 20-21
				$e = $r->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:164: characters 38-48
				return Outcome::Failure($e);
			} else if ($__hx__switch === 2) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:164: characters 34-35
				$e1 = $r->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:164: characters 38-48
				return Outcome::Failure($e1);
			}
		});
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:162: lines 162-165
		return $ret->gather();
	}

	/**
	 * @param StreamObject $s
	 * @param StreamParserObject $p
	 * 
	 * @return StreamObject
	 */
	static public function parseStream ($s, $p) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:184: characters 5-42
		return StreamParser_Impl_::parseStream($s, $p);
	}

	/**
	 * @param StreamObject $src
	 * @param ChunkObject $delim
	 * 
	 * @return object
	 */
	static public function split ($src, $delim) {
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:168: characters 5-45
		$s = RealSourceTools::parse($src, new Splitter($delim));
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:171: lines 171-174
		$tmp = Stream_Impl_::promise(Promise_Impl_::ofSpecific(Promise_Impl_::next($s, Next_Impl_::ofSafeSync(function ($p)  use (&$src) {
			#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:171: characters 116-119
			$_g = $p->a;
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:172: characters 19-24
				$chunk = $_g->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:172: characters 27-45
				return new Single(new LazyConst($chunk));
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:173: characters 20-23
				return $src;
			}
		}))));
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:175: lines 175-178
		$tmp1 = Promise_Impl_::next($s, function ($p1)  use (&$delim) {
			#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:175: characters 51-54
			$__hx__switch = ($p1->a->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:176: characters 9-28
				return new SyncFuture(new LazyConst(Outcome::Success($delim)));
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:177: characters 9-62
				return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Delimiter not found", new HxAnon([
					"fileName" => "tink/io/Source.hx",
					"lineNumber" => 177,
					"className" => "tink.io.RealSourceTools",
					"methodName" => "split",
				])))));
			}
		});
		#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:170: lines 170-180
		return new HxAnon([
			"before" => $tmp,
			"delimiter" => $tmp1,
			"after" => Stream_Impl_::promise(Promise_Impl_::ofSpecific(Promise_Impl_::next($s, Next_Impl_::ofSafeSync(function ($p2) {
				#/Users/ut/haxe/haxe_libraries/tink_io/0.6.2/haxelib/src/tink/io/Source.hx:179: characters 101-111
				return $p2->b;
			})))),
		]);
	}
}

Boot::registerClass(RealSourceTools::class, 'tink.io.RealSourceTools');
