<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx
 */

namespace tink\core\_Promise;

use \tink\core\_Lazy\LazyObject;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\core\Noise;
use \tink\core\_Callback\LinkObject;
use \tink\core\TypedError;
use \tink\core\Outcome;
use \tink\core\FutureTrigger;
use \tink\core\_Lazy\LazyConst;
use \tink\core\OutcomeTools;
use \tink\core\_Future\Future_Impl_;
use \tink\core\MPair;
use \tink\core\_Callback\CallbackLink_Impl_;
use \tink\core\_Future\FutureObject;

final class Promise_Impl_ {
	/**
	 * @var FutureObject
	 */
	static public $NEVER;
	/**
	 * @var FutureObject
	 */
	static public $NOISE;
	/**
	 * @var FutureObject
	 */
	static public $NULL;

	/**
	 * @param \Closure $f
	 * @param bool $lazy
	 * 
	 * @return FutureObject
	 */
	static public function _new ($f, $lazy = false) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:11: character 3
		if ($lazy === null) {
			$lazy = false;
		}
		$this1 = Future_Impl_::async(function ($cb)  use (&$f) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:13: characters 7-64
			$f(function ($v)  use (&$cb) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:13: characters 21-35
				$cb(Outcome::Success($v));
			}, function ($e)  use (&$cb) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:13: characters 49-63
				$cb(Outcome::Failure($e));
			});
		}, $lazy);
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:11: character 3
		return $this1;
	}

	/**
	 * @param FutureObject $a
	 * @param FutureObject $b
	 * 
	 * @return FutureObject
	 */
	static public function and ($a, $b) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:69: characters 5-61
		return Promise_Impl_::merge($a, $b, function ($a1, $b1) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:69: characters 46-60
			$this1 = new MPair($a1, $b1);
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:69: characters 39-60
			return new SyncFuture(new LazyConst(Outcome::Success($this1)));
		});
	}

	/**
	 * @param \Closure $gen
	 * 
	 * @return \Closure
	 */
	static public function cache ($gen) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:206: characters 5-18
		$p = null;
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:207: lines 207-224
		return function ()  use (&$gen, &$p) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:208: characters 7-19
			$ret = $p;
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:209: lines 209-219
			if ($ret === null) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:210: characters 9-26
				$sync = false;
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:211: lines 211-217
				$ret = Promise_Impl_::next($gen(), function ($o)  use (&$sync, &$p) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:212: lines 212-215
					$o->b->handle(function ($_)  use (&$sync, &$p) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:213: characters 13-24
						$sync = true;
						#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:214: characters 13-21
						$p = null;
					});
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:216: characters 11-21
					return new SyncFuture(new LazyConst(Outcome::Success($o->a)));
				});
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:218: characters 9-26
				if (!$sync) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:218: characters 19-26
					$p = $ret;
				}
			}
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:220: lines 220-223
			$ret1 = $ret->map(function ($o1)  use (&$p) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:221: characters 9-36
				if (!OutcomeTools::isSuccess($o1)) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:221: characters 28-36
					$p = null;
				}
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:222: characters 9-17
				return $o1;
			});
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:220: lines 220-223
			return $ret1->gather();
		};
	}

	/**
	 * @param FutureObject $this
	 * 
	 * @return FutureObject
	 */
	static public function eager ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:18: characters 5-24
		return $this1->eager();
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	static public function flatMap ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:24: characters 12-27
		$ret = $this1->flatMap($f);
		return $ret->gather();
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $cb
	 * 
	 * @return LinkObject
	 */
	static public function handle ($this1, $cb) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:45: characters 5-27
		return $this1->handle($cb);
	}

	/**
	 * @param \Array_hx $a
	 * @param int $concurrency
	 * @param bool $lazy
	 * 
	 * @return FutureObject
	 */
	static public function inParallel ($a, $concurrency = null, $lazy = null) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:136: lines 136-186
		if ($a->length === 0) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:136: characters 25-49
			return new SyncFuture(new LazyConst(Outcome::Success(new \Array_hx())));
		} else {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:137: lines 137-186
			return Future_Impl_::async(function ($cb)  use (&$concurrency, &$a) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:138: lines 138-145
				$result = new \Array_hx();
				$pending = $a->length;
				$links = null;
				$linkArray = new \Array_hx();
				$sync = false;
				$i = 0;
				$iter = $a->iterator();
				$next = null;
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:147: lines 147-151
				$done = function ($o)  use (&$sync, &$links, &$cb) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:148: lines 148-149
					if ($links === null) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:148: characters 30-41
						$sync = true;
					} else if ($links !== null) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:149: characters 16-30
						$links->cancel();
					}
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:150: characters 11-16
					$cb($o);
				};
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:153: lines 153-156
				$fail = function ($e)  use (&$pending, &$done) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:154: characters 11-22
					$pending = 0;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:155: characters 11-27
					$done(Outcome::Failure($e));
				};
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:162: lines 162-168
				$set = function ($index, $value)  use (&$next, &$pending, &$iter, &$result, &$done) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:163: characters 11-32
					$result[$index] = $value;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:164: lines 164-167
					if (($pending -= 1) === 0) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:165: characters 13-34
						$done(Outcome::Success($result));
					} else if ($iter->hasNext() && ($pending > 0)) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:167: characters 13-19
						$next();
					}
				};
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:170: lines 170-176
				$next = function ()  use (&$set, &$fail, &$iter, &$i, &$linkArray) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:171: characters 23-26
					$i += 1;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:171: characters 11-27
					$index1 = $i - 1;
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:172: lines 172-175
					$x = $iter->next()->handle(function ($o1)  use (&$set, &$fail, &$index1) {
						$__hx__switch = ($o1->index);
						if ($__hx__switch === 0) {
							#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:173: characters 26-27
							$v = $o1->params[0];
							#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:173: characters 30-43
							$set($index1, $v);
						} else if ($__hx__switch === 1) {
							#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:174: characters 26-27
							$e1 = $o1->params[0];
							#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:174: characters 30-37
							$fail($e1);
						}
					});
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:172: lines 172-175
					$linkArray->arr[$linkArray->length] = $x;
					++$linkArray->length;

				};
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:178: lines 178-180
				while (true) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:178: characters 15-70
					$tmp = null;
					if ($iter->hasNext() && ($pending > 0)) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:178: characters 28-70
						if ($concurrency !== null) {
							#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:178: characters 52-65
							$concurrency -= 1;
							#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:178: characters 15-70
							$tmp = ($concurrency + 1) > 0;
						} else {
							$tmp = true;
						}
					} else {
						$tmp = false;
					}
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:178: lines 178-180
					if (!$tmp) {
						break;
					}
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:179: characters 11-17
					$next();
				}
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:182: characters 9-26
				$links = CallbackLink_Impl_::fromMany($linkArray);
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:184: lines 184-185
				if ($sync) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:185: characters 11-25
					if ($links !== null) {
						$links->cancel();
					}
				}
			}, $lazy);
		}
	}

	/**
	 * @param \Array_hx $a
	 * 
	 * @return FutureObject
	 */
	static public function inSequence ($a) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:190: lines 190-198
		$loop = null;
		$loop = function ($index)  use (&$loop, &$a) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:192: lines 192-198
			if ($index === $a->length) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:192: characters 32-34
				return new SyncFuture(new LazyConst(Outcome::Success(new \Array_hx())));
			} else {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:194: lines 194-198
				return Promise_Impl_::next(($a->arr[$index] ?? null), function ($head)  use (&$index, &$loop) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:195: lines 195-197
					return Promise_Impl_::next($loop($index + 1), function ($tail)  use (&$head) {
						#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:196: characters 31-57
						return new SyncFuture(new LazyConst(Outcome::Success((\Array_hx::wrap([$head]))->concat($tail))));
					});
				});
			}
		};
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:201: characters 5-19
		return $loop(0);
	}

	/**
	 * @param FutureObject $this
	 * 
	 * @return FutureObject
	 */
	static public function isSuccess ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:51: characters 12-55
		$ret = $this1->map(function ($o) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:51: characters 34-54
			return OutcomeTools::isSuccess($o);
		});
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:51: characters 12-55
		return $ret->gather();
	}

	/**
	 * Given an Iterable (e.g. Array) of Promises, handle them one by one with the `yield` function until one of them yields `Some` value
	 * and the returned promise will resolve that value. If all of them yields `None`, the returned promise will resolve to the `finally` promise.
	 * In a nutshell, it is the async version of the following code:
	 * ```haxe
	 * for(promise in promises) {
	 *   switch yield(promise) {
	 *     case Some(v): return v;
	 *     case None:
	 *   }
	 * }
	 * return finally;
	 * ```
	 * @param promises An Iterable (e.g. Array) of Promises
	 * @param yield A function used to handle the promises and should return an Option
	 * @param finally A value to be used when all yields `None`
	 * @return Promise<T>
	 * 
	 * @param object $promises
	 * @param \Closure $yield
	 * @param FutureObject $finally
	 * @param bool $lazy
	 * 
	 * @return FutureObject
	 */
	static public function iterate ($promises, $yield, $finally, $lazy = null) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:90: lines 90-108
		return Future_Impl_::async(function ($cb)  use (&$yield, &$finally, &$promises) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:91: characters 7-38
			$iter = $promises->iterator();
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:92: lines 92-106
			$next = null;
			$next = function ()  use (&$yield, &$next, &$iter, &$finally, &$cb) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:93: lines 93-105
				if ($iter->hasNext()) {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:94: lines 94-103
					$iter->next()->handle(function ($o)  use (&$yield, &$next, &$cb) {
						$__hx__switch = ($o->index);
						if ($__hx__switch === 0) {
							#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:95: characters 26-27
							$v = $o->params[0];
							#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:96: lines 96-100
							$yield($v)->handle(function ($o1)  use (&$next, &$cb) {
								$__hx__switch = ($o1->index);
								if ($__hx__switch === 0) {
									#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:96: characters 50-51
									$__hx__switch = ($o1->params[0]->index);
									if ($__hx__switch === 0) {
										#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:97: characters 35-38
										$ret = $o1->params[0]->params[0];
										#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:97: characters 42-58
										$cb(Outcome::Success($ret));
									} else if ($__hx__switch === 1) {
										#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:98: characters 37-43
										$next();
									}
								} else if ($__hx__switch === 1) {
									#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:99: characters 30-31
									$e = $o1->params[0];
									#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:99: characters 34-48
									$cb(Outcome::Failure($e));
								}
							});
						} else if ($__hx__switch === 1) {
							#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:101: characters 26-27
							$e1 = $o->params[0];
							#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:102: characters 15-29
							$cb(Outcome::Failure($e1));
						}
					});
				} else {
					#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:105: characters 11-29
					$finally->handle($cb);
				}
			};
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:107: characters 7-13
			$next();
		}, $lazy);
	}

	/**
	 * @param LazyObject $p
	 * 
	 * @return FutureObject
	 */
	static public function lazy ($p) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:132: characters 5-63
		return Future_Impl_::async(function ($cb)  use (&$p) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:132: characters 38-56
			$p->get()->handle($cb);
		}, true);
	}

	/**
	 * @param FutureObject $p
	 * 
	 * @return FutureObject
	 */
	static public function lift ($p) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:230: characters 5-13
		return $p;
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	static public function map ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:21: characters 12-23
		$ret = $this1->map($f);
		return $ret->gather();
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	static public function mapError ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:39: lines 39-42
		$ret = $this1->map(function ($o)  use (&$f) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:40: characters 24-25
				return $o;
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:41: characters 20-21
				$e = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:41: characters 24-37
				return Outcome::Failure($f($e));
			}
		});
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:39: lines 39-42
		return $ret->gather();
	}

	/**
	 * @param FutureObject $this
	 * @param FutureObject $other
	 * @param \Closure $merger
	 * @param bool $gather
	 * 
	 * @return FutureObject
	 */
	static public function merge ($this1, $other, $merger, $gather = true) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:66: characters 5-97
		if ($gather === null) {
			$gather = true;
		}
		return Promise_Impl_::next($this1, function ($t)  use (&$other, &$merger) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:66: characters 30-88
			return Promise_Impl_::next($other, function ($a)  use (&$t, &$merger) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:66: characters 61-80
				return $merger($t, $a);
			}, false);
		}, $gather);
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * @param bool $gather
	 * 
	 * @return FutureObject
	 */
	static public function next ($this1, $f, $gather = true) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:54: lines 54-57
		if ($gather === null) {
			$gather = true;
		}
		$ret = $this1->flatMap(function ($o)  use (&$f) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:55: characters 22-23
				$d = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:55: characters 26-30
				return $f($d);
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:56: characters 22-23
				$f1 = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:56: characters 26-49
				return new SyncFuture(new LazyConst(Outcome::Failure($f1)));
			}
		});
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:54: lines 54-57
		if ($gather) {
			return $ret->gather();
		} else {
			return $ret;
		}
	}

	/**
	 * @param FutureObject $this
	 * 
	 * @return FutureObject
	 */
	static public function noise ($this1) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:48: characters 5-61
		return Promise_Impl_::next($this1, function ($v) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:48: characters 48-60
			return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
		});
	}

	/**
	 * @param mixed $d
	 * 
	 * @return FutureObject
	 */
	static public function ofData ($d) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:129: characters 12-33
		return new SyncFuture(new LazyConst(Outcome::Success($d)));
	}

	/**
	 * @param TypedError $e
	 * 
	 * @return FutureObject
	 */
	static public function ofError ($e) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:126: characters 12-33
		return new SyncFuture(new LazyConst(Outcome::Failure($e)));
	}

	/**
	 * @param FutureObject $f
	 * 
	 * @return FutureObject
	 */
	static public function ofFuture ($f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:120: characters 12-26
		$ret = $f->map(Boot::getStaticClosure(Outcome::class, 'Success'));
		return $ret->gather();
	}

	/**
	 * @param Outcome $o
	 * 
	 * @return FutureObject
	 */
	static public function ofOutcome ($o) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:123: characters 5-26
		return new SyncFuture(new LazyConst($o));
	}

	/**
	 * @param FutureObject $s
	 * 
	 * @return FutureObject
	 */
	static public function ofSpecific ($s) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:117: characters 5-36
		return $s;
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	static public function recover ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:33: lines 33-36
		$ret = $this1->flatMap(function ($o)  use (&$f) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:34: characters 20-21
				$d = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:34: characters 24-38
				return new SyncFuture(new LazyConst($d));
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:35: characters 20-21
				$e = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:35: characters 24-28
				return $f($e);
			}
		});
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:33: lines 33-36
		return $ret->gather();
	}

	/**
	 * @param FutureObject $this
	 * @param mixed $v
	 * 
	 * @return FutureObject
	 */
	static public function swap ($this1, $v) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:60: characters 5-40
		return Future_Impl_::_tryMap($this1, function ($_)  use (&$v) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:60: characters 32-40
			return $v;
		});
	}

	/**
	 * @param FutureObject $this
	 * @param TypedError $e
	 * 
	 * @return FutureObject
	 */
	static public function swapError ($this1, $e) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:63: characters 5-42
		return Promise_Impl_::mapError($this1, function ($_)  use (&$e) {
			#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:63: characters 33-41
			return $e;
		});
	}

	/**
	 *  Creates a new `PromiseTrigger`
	 * 
	 * @return FutureTrigger
	 */
	static public function trigger () {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:237: characters 12-32
		$this1 = new FutureTrigger();
		return $this1;
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	static public function tryRecover ($this1, $f) {
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:27: lines 27-30
		$ret = $this1->flatMap(function ($o)  use (&$f) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:28: characters 24-38
				return new SyncFuture(new LazyConst($o));
			} else if ($__hx__switch === 1) {
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:29: characters 20-21
				$e = $o->params[0];
				#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:29: characters 24-28
				return $f($e);
			}
		});
		#/Users/ut/haxe/haxe_libraries/tink_core/1.20.0/haxelib/src/tink/core/Promise.hx:27: lines 27-30
		return $ret->gather();
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$NULL = new SyncFuture(new LazyConst(Outcome::Success(null)));
		self::$NOISE = new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
		$ret = Future_Impl_::$NEVER->map(Boot::getStaticClosure(Outcome::class, 'Success'));
		self::$NEVER = $ret->gather();
	}
}

Boot::registerClass(Promise_Impl_::class, 'tink.core._Promise.Promise_Impl_');
Promise_Impl_::__hx__init();
