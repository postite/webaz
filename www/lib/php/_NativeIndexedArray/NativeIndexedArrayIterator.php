<?php
/**
 * Generated by Haxe 4.0.0-rc.2+77068e1
 * Haxe source file: /Users/ut/haxe/versions/4.0.0-rc.2/std/php/NativeIndexedArray.hx
 */

namespace php\_NativeIndexedArray;

use \php\Boot;

class NativeIndexedArrayIterator {
	/**
	 * @var int
	 */
	public $current;
	/**
	 * @var mixed
	 */
	public $data;
	/**
	 * @var int
	 */
	public $length;

	/**
	 * @param mixed $data
	 * 
	 * @return void
	 */
	public function __construct ($data) {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/NativeIndexedArray.hx:62: characters 20-21
		$this->current = 0;
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/NativeIndexedArray.hx:66: characters 3-30
		$this->length = count($data);
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/NativeIndexedArray.hx:67: characters 3-19
		$this->data = $data;
	}

	/**
	 * @return bool
	 */
	public function hasNext () {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/NativeIndexedArray.hx:71: characters 3-26
		return $this->current < $this->length;
	}

	/**
	 * @return mixed
	 */
	public function next () {
		#/Users/ut/haxe/versions/4.0.0-rc.2/std/php/NativeIndexedArray.hx:75: characters 10-25
		return $this->data[$this->current++];
	}
}

Boot::registerClass(NativeIndexedArrayIterator::class, 'php._NativeIndexedArray.NativeIndexedArrayIterator');
